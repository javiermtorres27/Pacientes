/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Registro_Pacientes_Doctores;

import java.sql.Connection;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;


public class Main extends javax.swing.JFrame {
    
    static Paciente[] pacientes = new Paciente[1000];
    static Medico[] medicos = new Medico[1000];
    static int cedulaBuscada = -1;
    static int cedulaBuscadaMedico = -1;
    
    public Main() {
        
        initComponents();
        getContentPane().setBackground(new java.awt.Color(204, 204, 255));
        
        limpiarLista();
        limpiarListaMedicos();
        limpiarListaPacientesSinMedico();
        limpiarListaPacientesConMedico();
        
        txtNombreMedicoAsignar.setEditable(false);
        txtEpsMedicoAsignar.setEditable(false);
        txtlistaEspecialidadAsignar.setEditable(false);
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        lblCedula = new javax.swing.JLabel();
        txtCedula = new javax.swing.JTextField();
        lblEdad = new javax.swing.JLabel();
        txtEdad = new javax.swing.JTextField();
        txtCiudad = new javax.swing.JTextField();
        lblCiudad = new javax.swing.JLabel();
        lblEps = new javax.swing.JLabel();
        txtEps = new javax.swing.JTextField();
        lblEnfermedad = new javax.swing.JLabel();
        lblNombre = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        botonIngresar = new javax.swing.JButton();
        lblIngresar = new javax.swing.JLabel();
        listaEnfermedad = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        botonProcesar = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        listaSalidas = new javax.swing.JList<>();
        jScrollPane4 = new javax.swing.JScrollPane();
        listaDatos = new javax.swing.JList<>();
        botonObtener = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        lblNombreEditar = new javax.swing.JLabel();
        txtNombreEditar = new javax.swing.JTextField();
        txtCedulaEditar = new javax.swing.JTextField();
        lblCedulaEditar = new javax.swing.JLabel();
        lblEdadEditar = new javax.swing.JLabel();
        txtEdadEditar = new javax.swing.JTextField();
        lblEnfermedadEditar = new javax.swing.JLabel();
        txtEpsEditar = new javax.swing.JTextField();
        lblEpsEditar = new javax.swing.JLabel();
        lblCiudadEditar = new javax.swing.JLabel();
        txtCiudadEditar = new javax.swing.JTextField();
        botonEditar = new javax.swing.JButton();
        botonEliminar = new javax.swing.JButton();
        lblBusqueda = new javax.swing.JLabel();
        lblCedulaBuscarPaciente = new javax.swing.JLabel();
        txtCedulaBuscarPaciente = new javax.swing.JTextField();
        botonBuscarPaciente = new javax.swing.JButton();
        listaEnfermedadEditar = new javax.swing.JComboBox<>();
        botonLimpiarEditar = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        lblIngresarMedico = new javax.swing.JLabel();
        lblNombreMedico = new javax.swing.JLabel();
        txtNombreMedico = new javax.swing.JTextField();
        lblCedulaMedico = new javax.swing.JLabel();
        txtCedulaMedico = new javax.swing.JTextField();
        lblEpsMedico = new javax.swing.JLabel();
        txtEpsMedico = new javax.swing.JTextField();
        botonIngresarMedico = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        listaMedicos = new javax.swing.JList<>();
        lblEspecialidad = new javax.swing.JLabel();
        listaEspecialidad = new javax.swing.JComboBox<>();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        listaPacientesConMedico = new javax.swing.JList<>();
        botonPacientesSinAsignacion = new javax.swing.JButton();
        lblBuscarMedico = new javax.swing.JLabel();
        lblCedulaMedicoBuscar = new javax.swing.JLabel();
        txtCedulaBuscarMedico = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        listaPacientesSinMedico = new javax.swing.JList<>();
        botonAsignarPaciente = new javax.swing.JButton();
        lblNombreMedicoAsignar = new javax.swing.JLabel();
        txtNombreMedicoAsignar = new javax.swing.JTextField();
        txtEpsMedicoAsignar = new javax.swing.JTextField();
        lblEpsMedicoAsignar = new javax.swing.JLabel();
        lblEspecialidadAsignar = new javax.swing.JLabel();
        botonBuscarMedico = new javax.swing.JButton();
        botonLimpiarAsignar = new javax.swing.JButton();
        txtlistaEspecialidadAsignar = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Formulario General");
        setBackground(new java.awt.Color(204, 204, 255));
        setResizable(false);

        lblCedula.setText("CÃ©dula");

        lblEdad.setText("Edad");

        lblCiudad.setText("Ciudad");

        lblEps.setText("EPS");

        lblEnfermedad.setText("Enfermedad Diagnosticada");

        lblNombre.setText("Nombre");

        botonIngresar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        botonIngresar.setText("Ingresar");
        botonIngresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonIngresarActionPerformed(evt);
            }
        });

        lblIngresar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblIngresar.setText("Ingresar datos de paciente");

        listaEnfermedad.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "cancer", "cardiovasculares", "respiratorias", "cerebrovasculares", "hipertension", "diabetes" }));
        listaEnfermedad.setSelectedIndex(-1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblIngresar, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonIngresar, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtNombre)
                            .addComponent(lblNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(txtCedula, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(txtEdad, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(lblCedula, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lblEdad, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblCiudad, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblEps, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblEnfermedad, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txtCiudad, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtEps, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(listaEnfermedad, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(135, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(lblIngresar)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNombre)
                    .addComponent(lblCedula)
                    .addComponent(lblEdad))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCedula, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtEdad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCiudad)
                    .addComponent(lblEps)
                    .addComponent(lblEnfermedad))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCiudad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtEps, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(listaEnfermedad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addComponent(botonIngresar)
                .addGap(168, 168, 168))
        );

        jTabbedPane1.addTab("Ingresar Paciente", jPanel1);

        botonProcesar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        botonProcesar.setText("Procesar datos");
        botonProcesar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonProcesarActionPerformed(evt);
            }
        });

        jScrollPane3.setViewportView(listaSalidas);

        jScrollPane4.setViewportView(listaDatos);
        listaDatos.getAccessibleContext().setAccessibleName("");

        botonObtener.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        botonObtener.setText("Obtener datos");
        botonObtener.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonObtenerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonObtener, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonProcesar, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonProcesar)
                    .addComponent(botonObtener))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                    .addComponent(jScrollPane3))
                .addContainerGap(32, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Procesar datos", jPanel2);

        lblNombreEditar.setText("Nombre");

        lblCedulaEditar.setText("CÃ©dula");

        lblEdadEditar.setText("Edad");

        lblEnfermedadEditar.setText("Enfermedad Diagnosticada");

        lblEpsEditar.setText("EPS");

        lblCiudadEditar.setText("Ciudad");

        botonEditar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        botonEditar.setText("Editar");
        botonEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEditarActionPerformed(evt);
            }
        });

        botonEliminar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        botonEliminar.setText("Eliminar");
        botonEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEliminarActionPerformed(evt);
            }
        });

        lblBusqueda.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblBusqueda.setText("Resultados de la bÃºsqueda");

        lblCedulaBuscarPaciente.setText("CÃ©dula Paciente");

        botonBuscarPaciente.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        botonBuscarPaciente.setText("Buscar");
        botonBuscarPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonBuscarPacienteActionPerformed(evt);
            }
        });

        listaEnfermedadEditar.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "cancer", "cardiovasculares", "respiratorias", "cerebrovasculares", "hipertension", "diabetes" }));
        listaEnfermedadEditar.setSelectedIndex(-1);

        botonLimpiarEditar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        botonLimpiarEditar.setText("Limpiar");
        botonLimpiarEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonLimpiarEditarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(txtCiudadEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtEpsEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(listaEnfermedadEditar, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(lblCedulaBuscarPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtCedulaBuscarPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(botonBuscarPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(botonEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(34, 34, 34)
                                .addComponent(botonEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(33, 33, 33)
                                .addComponent(botonLimpiarEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtNombreEditar)
                                    .addComponent(lblNombreEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(txtCedulaEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtEdadEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(lblCedulaEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(lblEdadEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(lblCiudadEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lblEpsEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lblEnfermedadEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lblBusqueda, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap(134, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCedulaBuscarPaciente)
                    .addComponent(txtCedulaBuscarPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonBuscarPaciente))
                .addGap(18, 18, 18)
                .addComponent(lblBusqueda)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNombreEditar)
                    .addComponent(lblCedulaEditar)
                    .addComponent(lblEdadEditar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNombreEditar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCedulaEditar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtEdadEditar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCiudadEditar)
                    .addComponent(lblEpsEditar)
                    .addComponent(lblEnfermedadEditar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCiudadEditar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtEpsEditar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(listaEnfermedadEditar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonEditar)
                    .addComponent(botonEliminar)
                    .addComponent(botonLimpiarEditar))
                .addGap(149, 149, 149))
        );

        jTabbedPane1.addTab("Editar / Eliminar", jPanel3);

        lblIngresarMedico.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblIngresarMedico.setText("Ingresar datos de mÃ©dico");

        lblNombreMedico.setText("Nombre");

        lblCedulaMedico.setText("CÃ©dula");

        lblEpsMedico.setText("Eps Vinculada");

        botonIngresarMedico.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        botonIngresarMedico.setText("Ingresar MÃ©dico");
        botonIngresarMedico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonIngresarMedicoActionPerformed(evt);
            }
        });

        jScrollPane5.setViewportView(listaMedicos);

        lblEspecialidad.setText("Especialidad");

        listaEspecialidad.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Oncologo-cancer", "Cardiologo-cardiovasculares", "Neumologo-respiratorias", "Neurologo-cerebrovasculares", "Internista-hipertension", "Endocrinologo-diabetes" }));
        listaEspecialidad.setSelectedIndex(-1);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(lblIngresarMedico, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtNombreMedico)
                                .addComponent(lblNombreMedico, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtCedulaMedico, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
                                .addComponent(lblCedulaMedico, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
                                .addComponent(lblEspecialidad, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
                                .addComponent(txtEpsMedico, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
                                .addComponent(lblEpsMedico, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addComponent(botonIngresarMedico, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(listaEspecialidad, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(49, 49, 49)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(65, 65, 65))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblIngresarMedico)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(lblNombreMedico)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNombreMedico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblCedulaMedico)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCedulaMedico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblEpsMedico)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtEpsMedico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblEspecialidad)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(listaEspecialidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(botonIngresarMedico, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(41, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Ingresar MÃ©dico", jPanel4);

        jScrollPane6.setViewportView(listaPacientesConMedico);

        botonPacientesSinAsignacion.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        botonPacientesSinAsignacion.setText("Obtener Pacientes Sin AsignaciÃ³n");
        botonPacientesSinAsignacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonPacientesSinAsignacionActionPerformed(evt);
            }
        });

        lblBuscarMedico.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblBuscarMedico.setText("Pacientes asignados");

        lblCedulaMedicoBuscar.setText("CÃ©dula MÃ©dico");

        jLabel3.setText("Primero busque el mÃ©dico, genere pacientes sin asignaciÃ³n y asigne uno por uno.");

        jScrollPane7.setViewportView(listaPacientesSinMedico);

        botonAsignarPaciente.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        botonAsignarPaciente.setText("Asignar Paciente al MÃ©dico");
        botonAsignarPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAsignarPacienteActionPerformed(evt);
            }
        });

        lblNombreMedicoAsignar.setText("Nombre MÃ©dico");

        lblEpsMedicoAsignar.setText("Eps Vinculada");

        lblEspecialidadAsignar.setText("Especialidad");

        botonBuscarMedico.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        botonBuscarMedico.setText("Buscar");
        botonBuscarMedico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonBuscarMedicoActionPerformed(evt);
            }
        });

        botonLimpiarAsignar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        botonLimpiarAsignar.setText("Limpiar");
        botonLimpiarAsignar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonLimpiarAsignarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(lblBuscarMedico, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(37, 37, 37)
                                .addComponent(jLabel3))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblNombreMedicoAsignar, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtNombreMedicoAsignar, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblEpsMedicoAsignar, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtEpsMedicoAsignar, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblEspecialidadAsignar, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtlistaEspecialidadAsignar)))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(lblCedulaMedicoBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(txtCedulaBuscarMedico, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(31, 31, 31)
                                .addComponent(botonBuscarMedico, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(39, 39, 39))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(botonLimpiarAsignar, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(botonPacientesSinAsignacion, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(botonAsignarPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(88, 88, 88))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblBuscarMedico)
                    .addComponent(jLabel3))
                .addGap(19, 19, 19)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblCedulaMedicoBuscar)
                        .addComponent(txtCedulaBuscarMedico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(botonBuscarMedico)
                        .addComponent(botonLimpiarAsignar)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                            .addComponent(lblNombreMedicoAsignar)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtNombreMedicoAsignar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                            .addComponent(lblEpsMedicoAsignar)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtEpsMedicoAsignar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtlistaEspecialidadAsignar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(lblEspecialidadAsignar))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonPacientesSinAsignacion)
                    .addComponent(botonAsignarPaciente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane7)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15))
        );

        jTabbedPane1.addTab("AtenciÃ³n MÃ©dica", jPanel5);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 417, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonIngresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonIngresarActionPerformed
        try {
            String nombre = txtNombre.getText().trim();
            String cedula = txtCedula.getText().trim();
            int edad = Integer.parseInt(txtEdad.getText().trim());
            String ciudad = txtCiudad.getText().trim();
            String eps = txtEps.getText().trim();
            String enfermedad = listaEnfermedad.getSelectedItem().toString();
            
            if(!nombre.isBlank() && !cedula.isBlank() && listaEnfermedad.getSelectedIndex() !=-1 && !ciudad.isBlank() && !eps.isBlank() && !enfermedad.isBlank()){
                agregarPaciente(nombre, cedula, edad, ciudad, eps, enfermedad);
            }else{
                JOptionPane.showMessageDialog(this, String.format("AsegÃºrese de escribir y/o seleccionar todos los campos"));
            }
            
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Debe digitar una edad vÃ¡lida.");
            //System.out.println(ex.getMessage());
        } catch (NullPointerException ex){
            JOptionPane.showMessageDialog(this, "Debe seleccionar enfermedad");
            //System.out.println(ex.getMessage());
        }
    }//GEN-LAST:event_botonIngresarActionPerformed
    
    
    /**
     * Crea la instancia paciente, agrega el paciente al vector, limpia campos y aumenta el atributo contador de pacientes
     * @param nombre
     * @param cedula
     * @param edad
     * @param ciudad
     * @param eps
     * @param enfermedad 
     */
    private void agregarPaciente(String nombre, String cedula, int edad, String ciudad, String eps, String enfermedad){

        //Al crear un paciente nuevo, no se asigna mÃ©dico, por eso el valor es -1
        int medicoAsignado = -1;
        
        //InstanciaciÃ³n del objeto paciente
        Paciente paciente = new Paciente (eps, enfermedad, nombre, cedula, edad, ciudad, medicoAsignado);
        //Se alimenta el vector pacientes en la posiciÃ³n del contador pacientes en la clase paciente
        pacientes[Paciente.getContadorPacientes()]=paciente;
        
        //Se limpian todos los campos
        txtNombre.setText("");
        txtCedula.setText("");
        txtEdad.setText("");
        txtCiudad.setText("");
        txtEps.setText("");
        listaEnfermedad.setSelectedIndex(-1);
        
        //Se aumenta el contador pacientes en la clase paciente para el proximo paciente que se vaya a crear
        Paciente.setContadorPacientes(Paciente.getContadorPacientes()+1);
    }
    
    private void botonProcesarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonProcesarActionPerformed
        
        procesar();
        
    }//GEN-LAST:event_botonProcesarActionPerformed
    
    /**
     * 1-Llama al metodo procesar
     * 2-Verifica que hayan pacientes ingresados
     * 3-Se crean las variables necesarias para el proceso
     * 4-Se crea el vector fijo enfermedades y los vectores que registrarÃ¡n la cantidad de cada enfermedad y de cada eps
     * 5-Se alimenta el vector cantidadEnfermedades y se encuentra la enfermedad que mÃ¡s y que menos se presenta
     * 6-Se alimenta el vector cantidadEps y se encuentra la Eps con mÃ¡s pacientes
     * 7-Se imprimen los datos encontrados
     * 8-Se analiza y se imprimen todos los pacientes en la categorÃ­a adulto
     */
    private void procesar(){
        //1 
        obtener();
       
        //2
        if(listaDatos.getModel().getSize()==0){
            JOptionPane.showMessageDialog(null,"Error, la base de datos no tiene pacientes");
        } else{
            DefaultListModel modeloSalidas = new DefaultListModel();
            
            //3
            int contador=0;
            int mayorCantidadEnfermedad = Integer.MIN_VALUE;
            int mayorPosicionEnfermedad = -1;
            int menorCantidadEnfermedad = Integer.MAX_VALUE;
            int menorPosicionEnfermedad = -1;
            int mayorCantidadEps = Integer.MIN_VALUE;
            int mayorPosicionEps = -1;
            
            //4
            String[] enfermedades = new String[]{"cancer","cardiovasculares","respiratorias","cerebrovasculares","hipertension","diabetes"};
            int[] cantidadEnfermedades = new int[enfermedades.length];
            int[] cantidadEps = new int[Paciente.getContadorPacientes()];
            
            listaSalidas.setModel(modeloSalidas);        
            
            //5
            //Se alimenta el vector con las cantidades de enfermedades
            for (int i = 0; i < enfermedades.length; i++) {
                for (int j = 0; j < Paciente.getContadorPacientes(); j++) {
                    if(pacientes[j].getEnfermedad().equalsIgnoreCase(enfermedades[i])){
                        contador++;
                    }
                }
                cantidadEnfermedades[i]=contador;
                contador = 0;
            }

            //Se analiza el vector cantidadEnfermedades para ver la enfermedad que mas se presenta
            for (int i = 0; i < enfermedades.length; i++) {
                if(cantidadEnfermedades[i]>mayorCantidadEnfermedad){
                    mayorCantidadEnfermedad=cantidadEnfermedades[i];
                    mayorPosicionEnfermedad=i;
                }    
            }

            //Se analiza el vector cantidadEnfermedades para ver la enfermedad que menos se presenta
            for (int i = 0; i < enfermedades.length; i++) {
                if(cantidadEnfermedades[i]<menorCantidadEnfermedad){
                    menorCantidadEnfermedad=cantidadEnfermedades[i];
                    menorPosicionEnfermedad=i;
                }    
            }
            
            //6
            //Se alimenta el vector cantidad eps
            contador=0;
            for (int i = 0; i < Paciente.getContadorPacientes(); i++) {
                for (int j = 0; j < Paciente.getContadorPacientes(); j++) {
                    if(pacientes[j].getEps().equalsIgnoreCase(pacientes[i].getEps())){
                        contador++;
                    }
                }
                cantidadEps[i]=contador;
                contador=0;
            }

            //Se analiza el vector cantidadEPS para ver la EPS que mas pacientes tiene
            for (int i = 0; i < cantidadEps.length; i++) {
                if(cantidadEps[i]>mayorCantidadEps){
                    mayorCantidadEps=cantidadEps[i];
                    mayorPosicionEps=i;
                }
            }
            
            //7
            //Se imprime la enfermedad con mayor y menor presencia.
            //Se imprime la Eps con mÃ¡s pacientes
            modeloSalidas.addElement(enfermedades[mayorPosicionEnfermedad]);
            modeloSalidas.addElement(enfermedades[menorPosicionEnfermedad]);
            modeloSalidas.addElement(pacientes[mayorPosicionEps].getEps());
            
            //8
            //Se imprimen todos los pacientes en la categorÃ­a adulto segÃºn el mÃ©todo clasificarEdad de la clase Paciente
            for (int i = 0; i < Paciente.getContadorPacientes(); i++) {
                if(pacientes[i].clasificarEdad(pacientes[i].getEdad())){
                    modeloSalidas.addElement(pacientes[i].getNombre()+" "+pacientes[i].getCedula());
                }
            }

            //actualizar los valores de la lista
            listaSalidas.setModel(modeloSalidas);
        }
    }
    
    
    /*private void agregarPacienteALista(String valor){
        DefaultListModel pacientes = (DefaultListModel)listaDatos.getModel();
        pacientes.addElement(valor);
        listaDatos.setModel(pacientes);
    }*/
    
    /*private boolean comprobarCedula(String cedula, String cedulaBD){
        return (cedula.equalsIgnoreCase(cedulaBD));
    }*/
    
    private void botonObtenerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonObtenerActionPerformed
        obtener();
    }//GEN-LAST:event_botonObtenerActionPerformed
    
    /**
     * Busca y agrega todos los pacientes creados a la listaDatos del menu Procesar Datos
     */
    private void obtener(){
        limpiarLista();
        DefaultListModel modeloLista = (DefaultListModel)listaDatos.getModel();
        for (int i = 0; i < Paciente.getContadorPacientes(); i++) {
            String linea = pacientes[i].mostrar();
            modeloLista.addElement(linea);
        }
    }
    
    private void botonEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEditarActionPerformed
        try {
            String nombre = txtNombreEditar.getText().trim();
            String cedula = txtCedulaEditar.getText().trim();
            int edad = Integer.parseInt(txtEdadEditar.getText().trim());
            String ciudad = txtCiudadEditar.getText().trim();
            String eps = txtEpsEditar.getText().trim();
            String enfermedad = listaEnfermedadEditar.getSelectedItem().toString();

            if(!nombre.isBlank() && !cedula.isBlank() && listaEnfermedadEditar.getSelectedIndex() !=-1 && !ciudad.isBlank() && !eps.isBlank() && !enfermedad.isBlank()){
                //proceder con el update
                pacientes[cedulaBuscada].setNombre(nombre);
                pacientes[cedulaBuscada].setCedula(cedula);
                pacientes[cedulaBuscada].setEdad(edad);
                pacientes[cedulaBuscada].setCiudad(ciudad);
                pacientes[cedulaBuscada].setEps(eps);
                pacientes[cedulaBuscada].setEnfermedad(enfermedad);

                JOptionPane.showMessageDialog(this, "Actualizacion exitosa");
                txtNombreEditar.setText("");
                txtCedulaEditar.setText("");
                txtEdadEditar.setText("");
                txtCiudadEditar.setText("");
                txtEpsEditar.setText("");
                listaEnfermedadEditar.setSelectedIndex(-1);

                txtCedulaBuscarPaciente.setEditable(true);
                txtCedulaBuscarPaciente.setText("");

            }else{
                JOptionPane.showMessageDialog(this, String.format("AsegÃºrese de escribir y/o seleccionar todos los campos"));
            }
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Debe digitar una edad valida.");
            System.out.println(ex.getMessage());
        }catch(NullPointerException ex){
            JOptionPane.showMessageDialog(this, "Debe seleccionar enfermedad");
            System.out.println(ex.getMessage());
        }
    }//GEN-LAST:event_botonEditarActionPerformed

    private void botonEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEliminarActionPerformed
        try {
            //Se asignan variables a la informacion digitada, eliminandose antes los posibles espacios iniciales y finales (trim)
            String nombre = txtNombreEditar.getText().trim();
            String cedula = txtCedulaEditar.getText().trim();
            int edad = Integer.parseInt(txtEdadEditar.getText().trim());
            String ciudad = txtCiudadEditar.getText().trim();
            String eps = txtEpsEditar.getText().trim();
            String enfermedad = listaEnfermedadEditar.getSelectedItem().toString();
            
            //Se verifica que ningun campo sea blanco
            if(!nombre.isBlank() && !cedula.isBlank() && listaEnfermedadEditar.getSelectedIndex() !=-1 && !ciudad.isBlank() && !eps.isBlank() && !enfermedad.isBlank()){
                
                //proceder con el Delete (eliminacion del paciente). Se llama al mÃ©todo Eliminar
                if(eliminar(txtCedulaBuscarPaciente.getText().trim())){
                    JOptionPane.showMessageDialog(this, String.format("Eliminado exitosamente"));
                    //Una vez eliminado el paciente, se desbloquea el campo de la cedula a buscar
                    txtCedulaBuscarPaciente.setEditable(true);
                    txtCedulaBuscarPaciente.setText("");
                    //Se llama al mÃ©todo limpiarEditar para dejar en blanco todos los campos
                    limpiarEditar();
                }else{
                    JOptionPane.showMessageDialog(this, String.format("No ha sido posible eliminar la cÃ©dula buscada"));
                }

            }else{
                JOptionPane.showMessageDialog(this, String.format("AsegÃºrese de escribir y/o seleccionar todos los campos"));
            }
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Debe digitar una edad valida.");
            System.out.println(ex.getMessage());
        }catch(NullPointerException ex){
            JOptionPane.showMessageDialog(this, "Debe seleccionar enfermedad");
            System.out.println(ex.getMessage());
        }
    }//GEN-LAST:event_botonEliminarActionPerformed
    
    /**
     * Realiza el proceso de eliminar un paciente
     * @param cedulaEliminar obtiene la cedula a eliminar
     * @return true o false si el paciente fue eliminado correctamente o no
     */
    public boolean eliminar (String cedulaEliminar){
        for (int i = 0; i < Paciente.getContadorPacientes(); i++) {
            if(pacientes[i].getCedula().equalsIgnoreCase(cedulaEliminar)){
                //Se llama al mÃ©todo correrIzquierda
                correrIzquierda(i);
                return true;
            }
        }
        return false;
    }
    
    /**
     * A partir de la posicion en la cual se encuentra la cedula, el vector se traslada 1 espacio hacia la izquierda
     * @param posicion se recibe la posicion en el vector pacientes donde la cedula coincide con la buscada
     */
    private void correrIzquierda(int posicion){
        for (int i = 0; i < pacientes.length; i++) {
            if(i>=posicion){
                try {
                    pacientes[i]=pacientes[i+1];
                } catch (ArrayIndexOutOfBoundsException e) {
                }
            }
        }
        //Se reduce en uno, el contador de pacientes de la clase Paciente porque se ha eliminado un paciente
        Paciente.setContadorPacientes(Paciente.getContadorPacientes()-1);
    }
    
    private void botonBuscarPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonBuscarPacienteActionPerformed
        //Comprueba que se haya digitado un valor en la cedula a buscar
        if(txtCedulaBuscarPaciente.getText().trim().isBlank()){
            JOptionPane.showMessageDialog(this, "Escriba una cÃ©dula a buscar");
        }else{
            //bloquea el campo de la cedula a buscar
            txtCedulaBuscarPaciente.setEditable(false);
            //Se crea el vector enfermedades para luego asignarle la enfermedad al combobox listaEnfermedadesEditar
            String[] enfermedades = new String[]{"cancer","cardiovasculares","respiratorias","cerebrovasculares","hipertension","diabetes"};
            //Se crea el objeto cedulaBuscar que adquiere el valor del campo correspondiente
            String cedulaBuscar = this.txtCedulaBuscarPaciente.getText().trim();
            //Se verifica que se haya digitado una cÃ©dula
            if(cedulaBuscar.isBlank()){
                JOptionPane.showMessageDialog(this, "Escriba una cÃ©dula para buscar sus datos");
            }else{
                //Se busca que la cedula digitada coincida con alguna del vector pacientes (de pacientes creados anteriormente)
                for (int i = 0; i < Paciente.getContadorPacientes(); i++) {
                    if (pacientes[i].getCedula().equalsIgnoreCase(cedulaBuscar)) {
                        //Se guarda la posicion en el vector pacientes de la cedula encontrada
                        cedulaBuscada = i;
                        //Se asignan los valores encontrados del paciente a cada uno de los campos de editar
                        txtNombreEditar.setText(pacientes[i].getNombre());
                        txtCedulaEditar.setText(pacientes[i].getCedula());
                        txtEdadEditar.setText(String.valueOf(pacientes[i].getEdad()));
                        txtCiudadEditar.setText(pacientes[i].getCiudad());
                        txtEpsEditar.setText(pacientes[i].getEps());
                        //Se analiza y se selecciona el item correspondiente para el combobox listaEnfermedadesEditar
                        for (int j = 0; j < enfermedades.length; j++) {
                            if(enfermedades[j].equalsIgnoreCase(pacientes[i].getEnfermedad())){
                                listaEnfermedadEditar.setSelectedIndex(j);
                            }
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_botonBuscarPacienteActionPerformed

    private void botonLimpiarEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonLimpiarEditarActionPerformed
        limpiarEditar();
    }//GEN-LAST:event_botonLimpiarEditarActionPerformed
    
    /**
     * Limpia todos los campos de editar paciente y desbloquea el campo de la cedula a buscar
     */
    public void limpiarEditar(){
        txtNombreEditar.setText("");
        txtCedulaEditar.setText("");
        txtEdadEditar.setText("");
        txtCiudadEditar.setText("");
        txtEpsEditar.setText("");
        listaEnfermedadEditar.setSelectedIndex(-1);
        
        txtCedulaBuscarPaciente.setEditable(true);
        txtCedulaBuscarPaciente.setText("");
    }
    
    private void botonIngresarMedicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonIngresarMedicoActionPerformed
        try {
            String nombre = txtNombreMedico.getText().trim();
            String cedula = txtCedulaMedico.getText().trim();
            String eps = txtEpsMedico.getText().trim();
            String especialidad = listaEspecialidad.getSelectedItem().toString();
            //Se verifica que ningun campo estÃ© vacÃ­o
            if(!nombre.isBlank() && !cedula.isBlank() && listaEspecialidad.getSelectedIndex() !=-1 && !eps.isBlank()){
                limpiarListaMedicos();
                //Se llama al mÃ©todo agregarMedico el cual permite agregar a la lista de Medicos
                agregarMedico(nombre, cedula, eps, especialidad);
            }else{
                JOptionPane.showMessageDialog(this, String.format("AsegÃºrese de escribir y/o seleccionar todos los campos"));
            }
                    
        }catch(NullPointerException ex){
            JOptionPane.showMessageDialog(this, "Debe seleccionar especialidad");
        }
    }//GEN-LAST:event_botonIngresarMedicoActionPerformed
    
    /**
     * Crea el objeto medico y lo agrega a la lista de Medicos
     * @param nombre
     * @param cedula
     * @param eps
     * @param especialidad 
     */
    private void agregarMedico(String nombre, String cedula, String eps, String especialidad){
        
        Medico medico = new Medico (nombre, cedula, eps, especialidad);
        
        //Agrega el medico creado al vector medicos en la posicion del contador de medicos de la clase medico
        medicos[Medico.getContadorMedicos()]=medico;
        
        txtNombreMedico.setText("");
        txtCedulaMedico.setText("");
        txtEpsMedico.setText("");
        listaEspecialidad.setSelectedIndex(-1);
        
        //Se incrementa el contador de medicos en la clase Medico
        Medico.setContadorMedicos(Medico.getContadorMedicos()+1);
        
        //Se agregan todos los medicos existentes en el vector medicos a la listaMedicos
        DefaultListModel modeloMedicos = (DefaultListModel)listaMedicos.getModel();
        for (int i = 0; i < Medico.getContadorMedicos(); i++) {
                String linea = medicos[i].mostrar();
                modeloMedicos.addElement(linea);
        }
    }
    
    /*private void agregarMedicoALista(String valor){
        DefaultListModel medicos = (DefaultListModel)listaMedicos.getModel();
        medicos.addElement(valor);
        listaMedicos.setModel(medicos);
    }*/
    
        /**
     * Se limpia la lista de medicos del menu Ingresar Medico
     */
    public void limpiarListaMedicos(){
        DefaultListModel modeloMedicos = new DefaultListModel();
        listaMedicos.setModel(modeloMedicos);
    }
    
    private void botonAsignarPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAsignarPacienteActionPerformed
        try{
            String cedulaBuscarMedico = this.txtCedulaBuscarMedico.getText().trim();
            //Se crea variable para guardar la posicion del mÃ©dico 
            int posicionMedico=0;
            //Se verifica que el campo de la cedula del medico no estÃ© en blanco
            if(cedulaBuscarMedico.isBlank()){
                JOptionPane.showMessageDialog(this, "Escriba una cÃ©dula para buscar sus datos");
            }else{
                for (int i = 0; i < Medico.getContadorMedicos(); i++) {
                    //Se busca la posicion del medico en el vector medicos a traves de su cedula
                    if (medicos[i].getCedula().equalsIgnoreCase(cedulaBuscarMedico)) {
                        posicionMedico = i;
                    }
                }
            }
            //el primer medico seleccionado de la lista PacientesSinMedico se asigna a la lista PacientesConMedico
            DefaultListModel modeloPacientesConMedico = (DefaultListModel)listaPacientesConMedico.getModel();
            String pacienteAAsignar = listaPacientesSinMedico.getSelectedValue();
            modeloPacientesConMedico.addElement(pacienteAAsignar);
            
            //El segundo campo (1) es la cedula del paciente por lo que se asigna dicho valor a la cedulaBuscar
            String cedulaBuscar = pacienteAAsignar.split(" ")[1].trim();
            
            //Se busca la cedula del paciente en el vector pacientes para registrar el medico asignado al paciente seleccionado
            for (int i = 0; i < Paciente.getContadorPacientes(); i++) {
                if (pacientes[i].getCedula().equalsIgnoreCase(cedulaBuscar)) {
                    pacientes[i].setMedicoAsignado(posicionMedico);
                }
            }
            pacientesSinAsignacion();
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un elemento");
        }
    }//GEN-LAST:event_botonAsignarPacienteActionPerformed

    private void botonPacientesSinAsignacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonPacientesSinAsignacionActionPerformed
        pacientesSinAsignacion();
    }//GEN-LAST:event_botonPacientesSinAsignacionActionPerformed
    
    /**
     * Actualiza la listaPacientesSinMedico para mostrar sÃ³lo los pacientes a los que no se les ha asignado mÃ©dico
     */
    private void pacientesSinAsignacion(){
        limpiarListaPacientesSinMedico();
        DefaultListModel modeloPacientesSinMedico = (DefaultListModel)listaPacientesSinMedico.getModel();
        String eps = this.txtEpsMedicoAsignar.getText();
        String especialidad = this.txtlistaEspecialidadAsignar.getText();
        
        //Buscar todos los pacientes que se pueden asignar al mÃ©dico buscado
        //Tiene que coincidir la EPS, la especialidad y que al paciente aÃºn no se le haya asignado mÃ©dico
        for (int i = 0; i < Paciente.getContadorPacientes(); i++) {
            if(pacientes[i].getEps().equalsIgnoreCase(eps) && especialidad.contains(pacientes[i].getEnfermedad()) && pacientes[i].getMedicoAsignado()==-1){
                String linea = pacientes[i].mostrar();
                modeloPacientesSinMedico.addElement(linea);
            }
        }
    }
    
    
    private void botonBuscarMedicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonBuscarMedicoActionPerformed
        if(txtCedulaBuscarMedico.getText().trim().isBlank()){
            JOptionPane.showMessageDialog(this, "Escriba una cÃ©dula a buscar");
        }else{
            txtCedulaBuscarMedico.setEditable(false);
            //Se crea el vector especialidades
            String[] especialidades = new String[]{"Oncologo-cancer","Cardiologo-cardiovasculares","Neumologo-respiratorias","Neurologo-cerebrovasculares","Internista-hipertension","Encologo-diabetes"};
            String cedulaBuscarMedico = this.txtCedulaBuscarMedico.getText().trim();
            if(cedulaBuscarMedico.isBlank()){
                JOptionPane.showMessageDialog(this, "Escriba una cÃ©dula para buscar sus datos");
            }else{
                //Se busca que la cedula digitada coincida con alguna en el registro(vector) medicos
                for (int i = 0; i < Medico.getContadorMedicos(); i++) {
                    if (medicos[i].getCedula().equalsIgnoreCase(cedulaBuscarMedico)) {
                        //Se guarda la posicion que ocupa el medico en el vector medicos
                        cedulaBuscadaMedico = i;
                        //Se asignan los valores encontrados del medico buscado en los campos especificos
                        txtNombreMedicoAsignar.setText(medicos[i].getNombre());
                        txtEpsMedicoAsignar.setText(medicos[i].getEps());
                        txtlistaEspecialidadAsignar.setText(medicos[i].getEspecialidad());
                    }
                }
                //Se guarda la posicion del Medico en el vector medicos
                int posicionMedico = -1;
                for (int i = 0; i < Medico.getContadorMedicos(); i++) {
                    if (medicos[i].getCedula().equalsIgnoreCase(cedulaBuscarMedico)) {
                        posicionMedico = i;
                    }
                }
                //Se buscan todos los pacientes a los que ya se les ha asignado el mÃ©dico buscado
                //Estos pacientes se van agregando uno a uno a la listaPacientesConMedico
                DefaultListModel modeloPacientesConMedico = (DefaultListModel)listaPacientesConMedico.getModel();
                for (int j = 0; j < Paciente.getContadorPacientes(); j++) {
                    if(pacientes[j].getMedicoAsignado()==posicionMedico){
                        String linea = pacientes[j].mostrar();
                        modeloPacientesConMedico.addElement(linea);
                    }
                }
            }
        }
    }//GEN-LAST:event_botonBuscarMedicoActionPerformed

    private void botonLimpiarAsignarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonLimpiarAsignarActionPerformed
        limpiarAsignar();
        limpiarListaPacientesSinMedico();
        limpiarListaPacientesConMedico();
    }//GEN-LAST:event_botonLimpiarAsignarActionPerformed
    
    /**
     * Limpia todos los campos del menÃº Atencion MÃ©dica
     */
    public void limpiarAsignar(){
        txtNombreMedicoAsignar.setText("");
        txtEpsMedicoAsignar.setText("");
        txtlistaEspecialidadAsignar.setText("");
        
        txtCedulaBuscarMedico.setEditable(true);
        txtCedulaBuscarMedico.setText("");
    }
    
    /**
     * Se limpia la listaDatos del menu Procesar Datos correspondiente a todos los pacientes registrados 
     */
    public void limpiarLista(){
        DefaultListModel modeloVacio = new DefaultListModel();
        listaDatos.setModel(modeloVacio);
    }
    
    /**
     * Limpia la listaPacientesSinMedico del menu Atencion Medica
     */
    public void limpiarListaPacientesSinMedico(){
        DefaultListModel modeloPacientesSinMedico = new DefaultListModel();
        listaPacientesSinMedico.setModel(modeloPacientesSinMedico);
    }
    
    /**
     * Limpia la listaPacientesConMedico del menu Atencion Medica
     */
    public void limpiarListaPacientesConMedico(){
        DefaultListModel modeloPacientesConMedico = new DefaultListModel();
        listaPacientesConMedico.setModel(modeloPacientesConMedico);
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonAsignarPaciente;
    private javax.swing.JButton botonBuscarMedico;
    private javax.swing.JButton botonBuscarPaciente;
    private javax.swing.JButton botonEditar;
    private javax.swing.JButton botonEliminar;
    private javax.swing.JButton botonIngresar;
    private javax.swing.JButton botonIngresarMedico;
    private javax.swing.JButton botonLimpiarAsignar;
    private javax.swing.JButton botonLimpiarEditar;
    private javax.swing.JButton botonObtener;
    private javax.swing.JButton botonPacientesSinAsignacion;
    private javax.swing.JButton botonProcesar;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblBuscarMedico;
    private javax.swing.JLabel lblBusqueda;
    private javax.swing.JLabel lblCedula;
    private javax.swing.JLabel lblCedulaBuscarPaciente;
    private javax.swing.JLabel lblCedulaEditar;
    private javax.swing.JLabel lblCedulaMedico;
    private javax.swing.JLabel lblCedulaMedicoBuscar;
    private javax.swing.JLabel lblCiudad;
    private javax.swing.JLabel lblCiudadEditar;
    private javax.swing.JLabel lblEdad;
    private javax.swing.JLabel lblEdadEditar;
    private javax.swing.JLabel lblEnfermedad;
    private javax.swing.JLabel lblEnfermedadEditar;
    private javax.swing.JLabel lblEps;
    private javax.swing.JLabel lblEpsEditar;
    private javax.swing.JLabel lblEpsMedico;
    private javax.swing.JLabel lblEpsMedicoAsignar;
    private javax.swing.JLabel lblEspecialidad;
    private javax.swing.JLabel lblEspecialidadAsignar;
    private javax.swing.JLabel lblIngresar;
    private javax.swing.JLabel lblIngresarMedico;
    private javax.swing.JLabel lblNombre;
    private javax.swing.JLabel lblNombreEditar;
    private javax.swing.JLabel lblNombreMedico;
    private javax.swing.JLabel lblNombreMedicoAsignar;
    private javax.swing.JList<String> listaDatos;
    private javax.swing.JComboBox<String> listaEnfermedad;
    private javax.swing.JComboBox<String> listaEnfermedadEditar;
    private javax.swing.JComboBox<String> listaEspecialidad;
    private javax.swing.JList<String> listaMedicos;
    private javax.swing.JList<String> listaPacientesConMedico;
    private javax.swing.JList<String> listaPacientesSinMedico;
    private javax.swing.JList<String> listaSalidas;
    private javax.swing.JTextField txtCedula;
    private javax.swing.JTextField txtCedulaBuscarMedico;
    private javax.swing.JTextField txtCedulaBuscarPaciente;
    private javax.swing.JTextField txtCedulaEditar;
    private javax.swing.JTextField txtCedulaMedico;
    private javax.swing.JTextField txtCiudad;
    private javax.swing.JTextField txtCiudadEditar;
    private javax.swing.JTextField txtEdad;
    private javax.swing.JTextField txtEdadEditar;
    private javax.swing.JTextField txtEps;
    private javax.swing.JTextField txtEpsEditar;
    private javax.swing.JTextField txtEpsMedico;
    private javax.swing.JTextField txtEpsMedicoAsignar;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtNombreEditar;
    private javax.swing.JTextField txtNombreMedico;
    private javax.swing.JTextField txtNombreMedicoAsignar;
    private javax.swing.JTextField txtlistaEspecialidadAsignar;
    // End of variables declaration//GEN-END:variables
}
