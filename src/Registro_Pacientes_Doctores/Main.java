/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Registro_Pacientes_Doctores;

import java.sql.Connection;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

public class Main extends javax.swing.JFrame {

    
    Conector conector;

    public Main() {

        initComponents();
        
        conector = new Conector();
        limpiarListaCiudadModificar();
        limpiarListaEpsModificar();
        limpiarListaEspecialidadModificar();
        limpiarListaEnfermedadEspecialidadIngresar();
        limpiarListaEnfermedadModificar();
        limpiarListaEnfermedadAsignar();
        limpiarListaEnfermedadAsignarModificar();
        limpiarListaAsignaciones();

        actualizarListaCiudadModificar();
        actualizarListaEpsModificar();
        actualizarListaEspecialidadModificar();
        actualizarListaEnfermedadModificar();
        actualizarListaEnfermedadAsignar();

        txtNombreAsignar.setEnabled(false);
        txtCiudadAsignar.setEnabled(false);
        txtEpsAsignar.setEnabled(false);
        txtNombreAsignarModificar.setEnabled(false);
        txtCiudadAsignarModificar.setEnabled(false);
        txtEpsAsignarModificar.setEnabled(false);

        String frase = "Ataque al corazon || Pepito Perez";
        String[] lista = frase.split(" || ");
        System.out.println(lista[1]);
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        lblCedulaPaciente = new javax.swing.JLabel();
        txtCedulaPaciente = new javax.swing.JTextField();
        lblEdadPaciente = new javax.swing.JLabel();
        txtEdadPaciente = new javax.swing.JTextField();
        lblCiudadPaciente = new javax.swing.JLabel();
        lblEpsPaciente = new javax.swing.JLabel();
        lblNombrePaciente = new javax.swing.JLabel();
        txtNombrePaciente = new javax.swing.JTextField();
        btnIngresarPaciente = new javax.swing.JButton();
        lblIngresar = new javax.swing.JLabel();
        listaEpsPaciente = new javax.swing.JComboBox<>();
        listaCiudadPaciente = new javax.swing.JComboBox<>();
        lblNombrePaciente1 = new javax.swing.JLabel();
        txtNombrePacienteModificar = new javax.swing.JTextField();
        btnModificarPaciente = new javax.swing.JButton();
        lblIngresar4 = new javax.swing.JLabel();
        listaEpsPacienteModificar = new javax.swing.JComboBox<>();
        listaCiudadPacienteModificar = new javax.swing.JComboBox<>();
        lblCedulaPaciente1 = new javax.swing.JLabel();
        txtCedulaPacienteModificar = new javax.swing.JTextField();
        lblEdadPaciente1 = new javax.swing.JLabel();
        txtEdadPacienteModificar = new javax.swing.JTextField();
        lblCiudadPaciente1 = new javax.swing.JLabel();
        lblEpsPaciente1 = new javax.swing.JLabel();
        lblCedulaBuscarPaciente2 = new javax.swing.JLabel();
        txtCedulaBuscarPaciente = new javax.swing.JTextField();
        btnBuscarPaciente = new javax.swing.JButton();
        btnEliminarPaciente = new javax.swing.JButton();
        btnLimpiarPaciente = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        lblIngresarMedico = new javax.swing.JLabel();
        lblNombreMedico = new javax.swing.JLabel();
        txtNombreMedico = new javax.swing.JTextField();
        lblCedulaMedico = new javax.swing.JLabel();
        txtCedulaMedico = new javax.swing.JTextField();
        lblEpsMedico = new javax.swing.JLabel();
        btnIngresarMedico = new javax.swing.JButton();
        lblEspecialidadMedico = new javax.swing.JLabel();
        listaEspecialidadMedico = new javax.swing.JComboBox<>();
        listaEpsMedico = new javax.swing.JComboBox<>();
        listaCiudadMedico = new javax.swing.JComboBox<>();
        lblCiudadMedico = new javax.swing.JLabel();
        lblIngresarMedico1 = new javax.swing.JLabel();
        btnEditarMedico = new javax.swing.JButton();
        lblEspecialidadMedico1 = new javax.swing.JLabel();
        listaEspecialidadMedicoModificar = new javax.swing.JComboBox<>();
        listaEpsMedicoModificar = new javax.swing.JComboBox<>();
        listaCiudadMedicoModificar = new javax.swing.JComboBox<>();
        lblCiudadMedico1 = new javax.swing.JLabel();
        lblNombreMedico1 = new javax.swing.JLabel();
        txtNombreMedicoModificar = new javax.swing.JTextField();
        lblCedulaMedico1 = new javax.swing.JLabel();
        txtCedulaMedicoModificar = new javax.swing.JTextField();
        lblEpsMedico1 = new javax.swing.JLabel();
        lblCedulaBuscarPaciente1 = new javax.swing.JLabel();
        txtCedulaBuscarMedico = new javax.swing.JTextField();
        btnBuscarMedico = new javax.swing.JButton();
        btnEliminarMedico = new javax.swing.JButton();
        btnLimpiarMedico = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        txtCiudadIngresar = new javax.swing.JTextField();
        lblCiudadIngresar = new javax.swing.JLabel();
        lblEpsIngresar = new javax.swing.JLabel();
        txtEpsIngresar = new javax.swing.JTextField();
        lblEs = new javax.swing.JLabel();
        txtEspecialidadIngresar = new javax.swing.JTextField();
        lblIngresar1 = new javax.swing.JLabel();
        btnIngresarCiudad = new javax.swing.JButton();
        btnIngresarEps = new javax.swing.JButton();
        btnIngresarEspecialidad = new javax.swing.JButton();
        lblIngresar2 = new javax.swing.JLabel();
        lblCiudadIngresar1 = new javax.swing.JLabel();
        txtCiudadModificar = new javax.swing.JTextField();
        btnEditarCiudad = new javax.swing.JButton();
        lblEpsIngresar1 = new javax.swing.JLabel();
        txtEpsModificar = new javax.swing.JTextField();
        btnEditarEps = new javax.swing.JButton();
        lblEs1 = new javax.swing.JLabel();
        txtEspecialidadModificar = new javax.swing.JTextField();
        btnEditarEspecialidad = new javax.swing.JButton();
        listaCiudadModificar = new javax.swing.JComboBox<>();
        listaEpsModificar = new javax.swing.JComboBox<>();
        listaEspecialidadModificar = new javax.swing.JComboBox<>();
        lblIngresar3 = new javax.swing.JLabel();
        lblEs2 = new javax.swing.JLabel();
        listaEnfermedadEspecialidadIngresar = new javax.swing.JComboBox<>();
        txtEnfermedadIngresar = new javax.swing.JTextField();
        btnIngresarEnfermedad = new javax.swing.JButton();
        btnEditarEnfermedad = new javax.swing.JButton();
        listaEnfermedadEspecialidadModificar = new javax.swing.JComboBox<>();
        lblEs3 = new javax.swing.JLabel();
        txtEnfermedadModificar = new javax.swing.JTextField();
        listaEnfermedadModificar = new javax.swing.JComboBox<>();
        lblEs4 = new javax.swing.JLabel();
        btnEliminarCiudad = new javax.swing.JButton();
        btnEliminarEps = new javax.swing.JButton();
        btnEliminarEspecialidad = new javax.swing.JButton();
        btnBuscarEnfermedad = new javax.swing.JButton();
        btnLimpiarEnfermedad = new javax.swing.JButton();
        btnEditarEnfermedad1 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        lblBuscarMedico = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        listaMedicoAsignar = new javax.swing.JComboBox<>();
        listaEnfermedadAsignar = new javax.swing.JComboBox<>();
        lblNombrePaciente2 = new javax.swing.JLabel();
        lblCedulaPaciente2 = new javax.swing.JLabel();
        lblEdadPaciente2 = new javax.swing.JLabel();
        lblCedulaBuscarPaciente4 = new javax.swing.JLabel();
        txtCedulaAsignar = new javax.swing.JTextField();
        btnBuscarAsignar = new javax.swing.JButton();
        btnLimpiarAsignar = new javax.swing.JButton();
        btnAsignar = new javax.swing.JButton();
        txtNombreAsignar = new javax.swing.JTextField();
        lblBuscarMedico1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        btnBuscarAsignarModificar = new javax.swing.JButton();
        btnLimpiarAsignarModificar = new javax.swing.JButton();
        btnAsignarModificar = new javax.swing.JButton();
        txtNombreAsignarModificar = new javax.swing.JTextField();
        lblNombrePaciente4 = new javax.swing.JLabel();
        lblCedulaBuscarPaciente5 = new javax.swing.JLabel();
        lblCedulaPaciente4 = new javax.swing.JLabel();
        txtCedulaAsignarModificar = new javax.swing.JTextField();
        listaMedicoAsignarModificar = new javax.swing.JComboBox<>();
        lblEdadPaciente4 = new javax.swing.JLabel();
        listaEnfermedadAsignarModificar = new javax.swing.JComboBox<>();
        btnAsignarEliminar = new javax.swing.JButton();
        txtCiudadAsignar = new javax.swing.JTextField();
        lblNombrePaciente3 = new javax.swing.JLabel();
        txtEpsAsignar = new javax.swing.JTextField();
        lblNombrePaciente5 = new javax.swing.JLabel();
        btnBuscarMedicoAsignar = new javax.swing.JButton();
        txtEpsAsignarModificar = new javax.swing.JTextField();
        lblNombrePaciente6 = new javax.swing.JLabel();
        txtCiudadAsignarModificar = new javax.swing.JTextField();
        lblNombrePaciente7 = new javax.swing.JLabel();
        btnBuscarMedicoAsignarModificar = new javax.swing.JButton();
        lblCedulaBuscarPaciente6 = new javax.swing.JLabel();
        listaAsignaciones = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Formulario General");
        setBackground(new java.awt.Color(204, 204, 255));
        setResizable(false);

        lblCedulaPaciente.setText("Cédula");

        lblEdadPaciente.setText("Edad");

        lblCiudadPaciente.setText("Ciudad");

        lblEpsPaciente.setText("EPS");

        lblNombrePaciente.setText("Nombre");

        btnIngresarPaciente.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnIngresarPaciente.setText("Ingresar Paciente");
        btnIngresarPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIngresarPacienteActionPerformed(evt);
            }
        });

        lblIngresar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblIngresar.setText("Ingresar datos de paciente");

        lblNombrePaciente1.setText("Nombre");

        btnModificarPaciente.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnModificarPaciente.setText("Editar Paciente");
        btnModificarPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarPacienteActionPerformed(evt);
            }
        });

        lblIngresar4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblIngresar4.setText("Editar datos de paciente");

        lblCedulaPaciente1.setText("Cédula");

        lblEdadPaciente1.setText("Edad");

        lblCiudadPaciente1.setText("Ciudad");

        lblEpsPaciente1.setText("EPS");

        lblCedulaBuscarPaciente2.setText("Cédula Paciente");

        btnBuscarPaciente.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnBuscarPaciente.setText("Buscar");
        btnBuscarPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarPacienteActionPerformed(evt);
            }
        });

        btnEliminarPaciente.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnEliminarPaciente.setText("Eliminar Paciente");
        btnEliminarPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarPacienteActionPerformed(evt);
            }
        });

        btnLimpiarPaciente.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnLimpiarPaciente.setText("Limpiar");
        btnLimpiarPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarPacienteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblCedulaBuscarPaciente2, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCedulaBuscarPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnBuscarPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnLimpiarPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblIngresar, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblIngresar4, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(btnEliminarPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(listaCiudadPacienteModificar, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(lblCiudadPaciente1, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(listaEpsPacienteModificar, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(lblEpsPaciente1, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnModificarPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txtNombrePacienteModificar)
                                            .addComponent(lblNombrePaciente1, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(txtCedulaPacienteModificar, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(txtEdadPacienteModificar, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(lblCedulaPaciente1, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(lblEdadPaciente1, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(listaCiudadPaciente, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblCiudadPaciente, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(listaEpsPaciente, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblEpsPaciente, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnIngresarPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtNombrePaciente)
                                    .addComponent(lblNombrePaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(txtCedulaPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtEdadPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(lblCedulaPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(lblEdadPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                .addContainerGap(134, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(lblIngresar)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNombrePaciente)
                    .addComponent(lblCedulaPaciente)
                    .addComponent(lblEdadPaciente))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNombrePaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCedulaPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtEdadPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCiudadPaciente)
                    .addComponent(lblEpsPaciente))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(listaCiudadPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(listaEpsPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(btnIngresarPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(36, 36, 36)
                .addComponent(lblIngresar4)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCedulaBuscarPaciente2)
                    .addComponent(txtCedulaBuscarPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBuscarPaciente)
                    .addComponent(btnLimpiarPaciente))
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNombrePaciente1)
                    .addComponent(lblCedulaPaciente1)
                    .addComponent(lblEdadPaciente1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNombrePacienteModificar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCedulaPacienteModificar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtEdadPacienteModificar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCiudadPaciente1)
                    .addComponent(lblEpsPaciente1))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(listaCiudadPacienteModificar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(listaEpsPacienteModificar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(btnModificarPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(btnEliminarPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(72, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Ingresar Paciente", jPanel1);

        lblIngresarMedico.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblIngresarMedico.setText("Ingresar datos de médico");

        lblNombreMedico.setText("Nombre");

        lblCedulaMedico.setText("Cédula");

        txtCedulaMedico.setMaximumSize(new java.awt.Dimension(158, 2147483647));

        lblEpsMedico.setText("Eps Vinculada");

        btnIngresarMedico.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnIngresarMedico.setText("Ingresar Médico");
        btnIngresarMedico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIngresarMedicoActionPerformed(evt);
            }
        });

        lblEspecialidadMedico.setText("Especialidad");

        lblCiudadMedico.setText("Ciudad");

        lblIngresarMedico1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblIngresarMedico1.setText("Editar datos de médico");

        btnEditarMedico.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnEditarMedico.setText("Editar Médico");
        btnEditarMedico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarMedicoActionPerformed(evt);
            }
        });

        lblEspecialidadMedico1.setText("Especialidad");

        lblCiudadMedico1.setText("Ciudad");

        lblNombreMedico1.setText("Nombre");

        lblCedulaMedico1.setText("Cédula");

        txtCedulaMedicoModificar.setMaximumSize(new java.awt.Dimension(158, 2147483647));

        lblEpsMedico1.setText("Eps Vinculada");

        lblCedulaBuscarPaciente1.setText("Cédula Médico");

        btnBuscarMedico.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnBuscarMedico.setText("Buscar");
        btnBuscarMedico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarMedicoActionPerformed(evt);
            }
        });

        btnEliminarMedico.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnEliminarMedico.setText("Eliminar Médico");
        btnEliminarMedico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarMedicoActionPerformed(evt);
            }
        });

        btnLimpiarMedico.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnLimpiarMedico.setText("Limpiar");
        btnLimpiarMedico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarMedicoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lblNombreMedico1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtNombreMedicoModificar, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtCedulaMedicoModificar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addComponent(lblCedulaMedico1, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lblEpsMedico1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(listaEpsMedicoModificar, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(listaEspecialidadMedicoModificar, javax.swing.GroupLayout.Alignment.LEADING, 0, 1, Short.MAX_VALUE)
                                    .addComponent(lblEspecialidadMedico1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblCiudadMedico, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(listaCiudadMedico, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnIngresarMedico, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnEditarMedico, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnEliminarMedico, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblCiudadMedico1, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(listaCiudadMedicoModificar, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(333, 333, 333))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(lblIngresarMedico, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(lblCedulaBuscarPaciente1, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtCedulaBuscarMedico, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnBuscarMedico, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnLimpiarMedico, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(jPanel4Layout.createSequentialGroup()
                                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(lblNombreMedico, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
                                        .addComponent(txtNombreMedico))
                                    .addGap(18, 18, 18)
                                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lblCedulaMedico, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtCedulaMedico, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addComponent(lblIngresarMedico1, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel4Layout.createSequentialGroup()
                                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(lblEpsMedico, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(listaEpsMedico, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(18, 18, 18)
                                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(listaEspecialidadMedico, javax.swing.GroupLayout.Alignment.LEADING, 0, 1, Short.MAX_VALUE)
                                        .addComponent(lblEspecialidadMedico, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(lblIngresarMedico)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblNombreMedico)
                            .addComponent(lblCedulaMedico))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNombreMedico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(lblCiudadMedico)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtCedulaMedico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(listaCiudadMedico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEspecialidadMedico)
                    .addComponent(lblEpsMedico))
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(listaEspecialidadMedico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(listaEpsMedico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(btnIngresarMedico, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(59, 59, 59)
                .addComponent(lblIngresarMedico1)
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCedulaBuscarPaciente1)
                    .addComponent(txtCedulaBuscarMedico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBuscarMedico)
                    .addComponent(btnLimpiarMedico))
                .addGap(25, 25, 25)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblNombreMedico1)
                            .addComponent(lblCedulaMedico1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNombreMedicoModificar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(lblCiudadMedico1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtCedulaMedicoModificar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(listaCiudadMedicoModificar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEspecialidadMedico1)
                    .addComponent(lblEpsMedico1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnEditarMedico, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(listaEspecialidadMedicoModificar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(listaEpsMedicoModificar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(btnEliminarMedico, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(87, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Ingresar Médico", jPanel4);

        lblCiudadIngresar.setText("Ciudad");

        lblEpsIngresar.setText("EPS");

        lblEs.setText("Especialidad");

        lblIngresar1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblIngresar1.setText("Ingresar Ciudad, Eps, Especialidad");

        btnIngresarCiudad.setText("Ingresar Ciudad");
        btnIngresarCiudad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIngresarCiudadActionPerformed(evt);
            }
        });

        btnIngresarEps.setText("Ingresar EPS");
        btnIngresarEps.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIngresarEpsActionPerformed(evt);
            }
        });

        btnIngresarEspecialidad.setText("Ingresar Especialidad");
        btnIngresarEspecialidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIngresarEspecialidadActionPerformed(evt);
            }
        });

        lblIngresar2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblIngresar2.setText("Editar/Eliminar Ciudad, Eps, Especialidad");

        lblCiudadIngresar1.setText("Ciudad");

        btnEditarCiudad.setText("Editar Ciudad");
        btnEditarCiudad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarCiudadActionPerformed(evt);
            }
        });

        lblEpsIngresar1.setText("EPS");

        btnEditarEps.setText("Editar Eps");
        btnEditarEps.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarEpsActionPerformed(evt);
            }
        });

        lblEs1.setText("Especialidad");

        btnEditarEspecialidad.setText("Editar Especialidad");
        btnEditarEspecialidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarEspecialidadActionPerformed(evt);
            }
        });

        lblIngresar3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblIngresar3.setText("Enfermedad relacionada a una Especialidad");

        lblEs2.setText("Seleccione Especialidad");

        btnIngresarEnfermedad.setText("Ingresar Enfermedad");
        btnIngresarEnfermedad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIngresarEnfermedadActionPerformed(evt);
            }
        });

        btnEditarEnfermedad.setText("Editar Enfermedad");
        btnEditarEnfermedad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarEnfermedadActionPerformed(evt);
            }
        });

        lblEs3.setText("Seleccione Especialidad");

        lblEs4.setText("<html>Seleccione Enfermedad a Modificar<html>");

        btnEliminarCiudad.setText("Eliminar Ciudad");
        btnEliminarCiudad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarCiudadActionPerformed(evt);
            }
        });

        btnEliminarEps.setText("Eliminar Eps");
        btnEliminarEps.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarEpsActionPerformed(evt);
            }
        });

        btnEliminarEspecialidad.setText("Eliminar Especialidad");
        btnEliminarEspecialidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarEspecialidadActionPerformed(evt);
            }
        });

        btnBuscarEnfermedad.setText("Buscar Enfermedad");
        btnBuscarEnfermedad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarEnfermedadActionPerformed(evt);
            }
        });

        btnLimpiarEnfermedad.setText("Limpiar");
        btnLimpiarEnfermedad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarEnfermedadActionPerformed(evt);
            }
        });

        btnEditarEnfermedad1.setText("Eliminar Enfermedad");
        btnEditarEnfermedad1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarEnfermedad1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(lblCiudadIngresar1, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lblEpsIngresar1, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txtCiudadModificar, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnEditarCiudad, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(lblIngresar2, javax.swing.GroupLayout.PREFERRED_SIZE, 518, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblIngresar1, javax.swing.GroupLayout.PREFERRED_SIZE, 518, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel6Layout.createSequentialGroup()
                                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(btnIngresarCiudad, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(lblCiudadIngresar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(txtCiudadIngresar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(18, 18, 18)
                                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel6Layout.createSequentialGroup()
                                            .addComponent(lblEpsIngresar, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(18, 18, 18)
                                            .addComponent(lblEs, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(jPanel6Layout.createSequentialGroup()
                                            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(btnIngresarEps, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(txtEpsIngresar, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGap(18, 18, 18)
                                            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(txtEspecialidadIngresar)
                                                .addComponent(btnIngresarEspecialidad, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel6Layout.createSequentialGroup()
                                        .addComponent(listaCiudadModificar, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(listaEpsModificar, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(txtEpsModificar, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnEditarEps, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnEliminarEps, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(24, 24, 24)
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnEditarEspecialidad, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(txtEspecialidadModificar, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
                                        .addComponent(listaEspecialidadModificar, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(btnEliminarEspecialidad, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblEs1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(btnEliminarCiudad, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblIngresar3, javax.swing.GroupLayout.PREFERRED_SIZE, 518, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(listaEnfermedadEspecialidadIngresar, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblEs2, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtEnfermedadIngresar, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnIngresarEnfermedad, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(111, 111, 111)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblEs4, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(listaEnfermedadModificar, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnBuscarEnfermedad, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnLimpiarEnfermedad, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtEnfermedadModificar, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblEs3, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(listaEnfermedadEspecialidadModificar, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnEditarEnfermedad, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnEditarEnfermedad1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(lblIngresar1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCiudadIngresar)
                    .addComponent(lblEpsIngresar)
                    .addComponent(lblEs))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCiudadIngresar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtEpsIngresar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtEspecialidadIngresar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnIngresarCiudad)
                    .addComponent(btnIngresarEps)
                    .addComponent(btnIngresarEspecialidad))
                .addGap(27, 27, 27)
                .addComponent(lblIngresar2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCiudadIngresar1)
                    .addComponent(lblEpsIngresar1)
                    .addComponent(lblEs1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(listaEpsModificar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(listaEspecialidadModificar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(listaCiudadModificar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCiudadModificar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtEpsModificar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtEspecialidadModificar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEditarCiudad)
                    .addComponent(btnEditarEps)
                    .addComponent(btnEditarEspecialidad))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEliminarCiudad)
                    .addComponent(btnEliminarEps)
                    .addComponent(btnEliminarEspecialidad))
                .addGap(24, 24, 24)
                .addComponent(lblIngresar3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(txtEnfermedadIngresar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblEs2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(listaEnfermedadEspecialidadIngresar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(btnIngresarEnfermedad))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(txtEnfermedadModificar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblEs3))
                            .addComponent(lblEs4, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(listaEnfermedadModificar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(listaEnfermedadEspecialidadModificar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnBuscarEnfermedad)
                            .addComponent(btnEditarEnfermedad))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnLimpiarEnfermedad)
                    .addComponent(btnEditarEnfermedad1))
                .addContainerGap(66, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Ingresar Otros", jPanel6);

        lblBuscarMedico.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblBuscarMedico.setText("Asignación Médica");

        jLabel3.setText("Para asignar debe buscar una cedula paciente");

        lblNombrePaciente2.setText("Paciente");

        lblCedulaPaciente2.setText("Enfermedad | Especialidad");

        lblEdadPaciente2.setText("Medico");

        lblCedulaBuscarPaciente4.setText("Cédula Paciente");

        btnBuscarAsignar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnBuscarAsignar.setText("Buscar");
        btnBuscarAsignar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarAsignarActionPerformed(evt);
            }
        });

        btnLimpiarAsignar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnLimpiarAsignar.setText("Limpiar");
        btnLimpiarAsignar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarAsignarActionPerformed(evt);
            }
        });

        btnAsignar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnAsignar.setText("Asignar");
        btnAsignar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAsignarActionPerformed(evt);
            }
        });

        lblBuscarMedico1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblBuscarMedico1.setText("Editar Asignación Médica");

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("<html>Para editar o eliminar debe buscar una cedula<p>\npaciente y luego seleccionar una asignacion");

        btnBuscarAsignarModificar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnBuscarAsignarModificar.setText("Buscar");
        btnBuscarAsignarModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarAsignarModificarActionPerformed(evt);
            }
        });

        btnLimpiarAsignarModificar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnLimpiarAsignarModificar.setText("Limpiar");
        btnLimpiarAsignarModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarAsignarModificarActionPerformed(evt);
            }
        });

        btnAsignarModificar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnAsignarModificar.setText("Editar Asignación");
        btnAsignarModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAsignarModificarActionPerformed(evt);
            }
        });

        lblNombrePaciente4.setText("Paciente");

        lblCedulaBuscarPaciente5.setText("Cédula Paciente");

        lblCedulaPaciente4.setText("Enfermedad | Especialidad");

        lblEdadPaciente4.setText("Medico");

        btnAsignarEliminar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnAsignarEliminar.setText("Eliminar Asignación");
        btnAsignarEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAsignarEliminarActionPerformed(evt);
            }
        });

        lblNombrePaciente3.setText("Ciudad Paciente");

        lblNombrePaciente5.setText("Eps Paciente");

        btnBuscarMedicoAsignar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnBuscarMedicoAsignar.setText("Buscar Médicos");
        btnBuscarMedicoAsignar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarMedicoAsignarActionPerformed(evt);
            }
        });

        lblNombrePaciente6.setText("Eps Paciente");

        lblNombrePaciente7.setText("Ciudad Paciente");

        btnBuscarMedicoAsignarModificar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnBuscarMedicoAsignarModificar.setText("Buscar Médicos");
        btnBuscarMedicoAsignarModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarMedicoAsignarModificarActionPerformed(evt);
            }
        });

        lblCedulaBuscarPaciente6.setText("Asignaciones");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap(22, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel5Layout.createSequentialGroup()
                                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(txtNombreAsignarModificar)
                                        .addComponent(lblNombrePaciente4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(18, 18, 18)
                                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(txtCiudadAsignarModificar)
                                        .addComponent(lblNombrePaciente7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(18, 18, 18)
                                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(txtEpsAsignarModificar)
                                        .addComponent(lblNombrePaciente6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                                    .addComponent(lblCedulaPaciente4, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(btnBuscarMedicoAsignarModificar, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(lblEdadPaciente4, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(1, 1, 1)))
                            .addComponent(lblCedulaPaciente2, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(jPanel5Layout.createSequentialGroup()
                                    .addComponent(lblBuscarMedico, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel3))
                                .addGroup(jPanel5Layout.createSequentialGroup()
                                    .addComponent(lblCedulaBuscarPaciente4, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(txtCedulaAsignar, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(btnBuscarAsignar, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(btnLimpiarAsignar, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(txtNombreAsignar, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                                .addComponent(lblNombrePaciente2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(btnAsignar, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel5Layout.createSequentialGroup()
                                    .addComponent(lblCedulaBuscarPaciente6, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(listaAsignaciones, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel5Layout.createSequentialGroup()
                                    .addComponent(lblCedulaBuscarPaciente5, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(txtCedulaAsignarModificar, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(btnBuscarAsignarModificar, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(btnLimpiarAsignarModificar, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel5Layout.createSequentialGroup()
                                    .addComponent(lblBuscarMedico1, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel5Layout.createSequentialGroup()
                                        .addGap(179, 179, 179)
                                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(txtCiudadAsignar)
                                            .addComponent(lblNombrePaciente3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(txtEpsAsignar)
                                            .addComponent(lblNombrePaciente5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(jPanel5Layout.createSequentialGroup()
                                                .addComponent(btnBuscarMedicoAsignar, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18))
                                            .addGroup(jPanel5Layout.createSequentialGroup()
                                                .addComponent(listaEnfermedadAsignar, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(97, 97, 97)))
                                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(listaMedicoAsignar, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lblEdadPaciente2, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                        .addContainerGap(132, Short.MAX_VALUE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(listaEnfermedadAsignarModificar, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(listaMedicoAsignarModificar, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel5Layout.createSequentialGroup()
                                .addComponent(btnAsignarModificar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(356, 356, 356))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGap(357, 357, 357)
                                .addComponent(btnAsignarEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblBuscarMedico)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCedulaBuscarPaciente4)
                    .addComponent(txtCedulaAsignar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBuscarAsignar)
                    .addComponent(btnLimpiarAsignar))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(lblNombrePaciente2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtNombreAsignar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(lblNombrePaciente3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtCiudadAsignar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addComponent(lblNombrePaciente5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtEpsAsignar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(10, 10, 10)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEdadPaciente2, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCedulaPaciente2)
                    .addComponent(btnBuscarMedicoAsignar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(listaMedicoAsignar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(listaEnfermedadAsignar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnAsignar, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblBuscarMedico1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCedulaBuscarPaciente5)
                    .addComponent(txtCedulaAsignarModificar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBuscarAsignarModificar)
                    .addComponent(btnLimpiarAsignarModificar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel5Layout.createSequentialGroup()
                            .addComponent(lblNombrePaciente7)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(txtCiudadAsignarModificar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                            .addComponent(lblNombrePaciente6)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(txtEpsAsignarModificar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(lblNombrePaciente4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtNombreAsignarModificar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(12, 12, 12)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCedulaBuscarPaciente6)
                    .addComponent(listaAsignaciones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEdadPaciente4, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBuscarMedicoAsignarModificar)
                    .addComponent(lblCedulaPaciente4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(listaMedicoAsignarModificar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(listaEnfermedadAsignarModificar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAsignarEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAsignarModificar, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Atención Médica", jPanel5);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 672, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnEditarEnfermedad1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarEnfermedad1ActionPerformed
        Connection conexionBD = conector.crearConexion();
        if (conexionBD == null) {
            JOptionPane.showConfirmDialog(this, "No se pudo crear la conexion");
        } else {
            try {
                String enfermedadModificar = listaEnfermedadModificar.getSelectedItem().toString();
                String textoQuery = "Delete from Enfermedades where Enfermedad = '%1$s';";
                String query = String.format(textoQuery, enfermedadModificar);
                System.out.println(query);
                Integer filasAfectadas = conector.ejecutarActualizacion(conexionBD, query);
                System.out.println(filasAfectadas);
                if (filasAfectadas > 0) {
                    JOptionPane.showMessageDialog(this, String.format("Enfermedad eliminada exitosamente."));
                    txtEnfermedadModificar.setText("");
                    actualizarListaEspecialidadModificar();
                    actualizarListaEnfermedadModificar();
                    txtEnfermedadModificar.setText("");
                    listaEnfermedadModificar.setEnabled(true);
                    listaEnfermedadModificar.setSelectedIndex(-1);
                    listaEnfermedadEspecialidadModificar.setSelectedIndex(-1);

                    conexionBD.close();
                } else {
                    JOptionPane.showMessageDialog(this, String.format("Hubo un error en la eliminación."));
                }
            } catch (NullPointerException ex) {
                JOptionPane.showMessageDialog(this, "Debe seleccionar enfermedad");
                //System.out.println(ex.getMessage());
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Error de conexión con vase de datos");
                //System.out.println(ex.getMessage());
            }
        }
    }//GEN-LAST:event_btnEditarEnfermedad1ActionPerformed

    private void btnLimpiarEnfermedadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarEnfermedadActionPerformed
        txtEnfermedadModificar.setText("");
        listaEnfermedadModificar.setEnabled(true);
        listaEnfermedadModificar.setSelectedIndex(-1);
        listaEnfermedadEspecialidadModificar.setSelectedIndex(-1);
    }//GEN-LAST:event_btnLimpiarEnfermedadActionPerformed

    private void btnBuscarEnfermedadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarEnfermedadActionPerformed
        Connection conexionBD = conector.crearConexion();
        if (conexionBD == null) {
            JOptionPane.showConfirmDialog(this, "No se pudo crear la conexion");
        } else {
            try {
                String enfermedad = listaEnfermedadModificar.getSelectedItem().toString();
                String textoQuerySelect = "Select * from Enfermedades where Enfermedad = '%1$s';";
                String querySelect = String.format(textoQuerySelect, enfermedad);
                ResultSet resultados = conector.ejecutarQuery(conexionBD, querySelect);
                String enfermedadNueva = resultados.getString("Enfermedad");
                String idEspecialidadNueva = resultados.getString("Id_Especialidad");
                txtEnfermedadModificar.setText(enfermedadNueva);
                String textoQuerySelect2 = "Select * from Especialidades where Id = '%1$s';";
                String querySelect2 = String.format(textoQuerySelect2, idEspecialidadNueva);
                ResultSet resultados2 = conector.ejecutarQuery(conexionBD, querySelect2);
                String especialidad = resultados2.getString("Especialidad");
                for (int i = 0; i < listaEnfermedadEspecialidadModificar.getItemCount(); i++) {
                    if (especialidad.equalsIgnoreCase(listaEnfermedadEspecialidadModificar.getItemAt(i))) {
                        listaEnfermedadEspecialidadModificar.setSelectedIndex(i);
                    }
                }
                listaEnfermedadModificar.setEnabled(false);
                conexionBD.close();

            } catch (NullPointerException e) {
                JOptionPane.showMessageDialog(this, String.format("Debe seleccionar un dato de la lista"));
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, String.format("Error de Conexión"));
            }
        }
    }//GEN-LAST:event_btnBuscarEnfermedadActionPerformed

    private void btnEliminarEspecialidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarEspecialidadActionPerformed
        Connection conexionBD = conector.crearConexion();
        if (conexionBD == null) {
            JOptionPane.showConfirmDialog(this, "No se pudo crear la conexion");
        } else {
            try {
                String especialidadAModificar = listaEspecialidadModificar.getSelectedItem().toString();
                String textoQuery = "Delete from Especialidades where Especialidad = '%1$s';";
                String query = String.format(textoQuery, especialidadAModificar);
                System.out.println(query);
                Integer filasAfectadas = conector.ejecutarActualizacion(conexionBD, query);
                if (filasAfectadas > 0) {
                    JOptionPane.showMessageDialog(this, String.format("Especialidad eliminada exitosamente."));
                    txtEspecialidadModificar.setText("");
                    actualizarListaEspecialidadModificar();
                    listaEspecialidadModificar.setSelectedIndex(-1);

                    conexionBD.close();
                } else {
                    JOptionPane.showMessageDialog(this, String.format("Hubo un error en la eliminación."));
                }
            } catch (NullPointerException ex) {
                JOptionPane.showMessageDialog(this, "Debe seleccionar especialidad");
                //System.out.println(ex.getMessage());
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Error de conexión con base de datos");
                //System.out.println(ex.getMessage());
            }
        }
    }//GEN-LAST:event_btnEliminarEspecialidadActionPerformed

    private void btnEliminarEpsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarEpsActionPerformed
        Connection conexionBD = conector.crearConexion();
        if (conexionBD == null) {
            JOptionPane.showConfirmDialog(this, "No se pudo crear la conexion");
        } else {
            try {
                String epsAModificar = listaEpsModificar.getSelectedItem().toString();
                String textoQuery = "Delete from EPS where EPS = '%1$s';";
                String query = String.format(textoQuery, epsAModificar);
                System.out.println(query);
                Integer filasAfectadas = conector.ejecutarActualizacion(conexionBD, query);
                if (filasAfectadas > 0) {
                    JOptionPane.showMessageDialog(this, String.format("Eps eliminada exitosamente."));
                    txtEpsModificar.setText("");
                    actualizarListaEpsModificar();
                    listaEpsModificar.setSelectedIndex(-1);

                    conexionBD.close();
                } else {
                    JOptionPane.showMessageDialog(this, String.format("Hubo un error en la eliminación."));
                }
            } catch (NullPointerException ex) {
                JOptionPane.showMessageDialog(this, "Debe seleccionar eps");
                //System.out.println(ex.getMessage());
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Error en conexion con base de datos");
                //System.out.println(ex.getMessage());
            }
        }
    }//GEN-LAST:event_btnEliminarEpsActionPerformed

    private void btnEliminarCiudadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarCiudadActionPerformed
        Connection conexionBD = conector.crearConexion();
        if (conexionBD == null) {
            JOptionPane.showConfirmDialog(this, "No se pudo crear la conexion");
        } else {
            try {
                String ciudadAModificar = listaCiudadModificar.getSelectedItem().toString();
                String textoQuery = "Delete from Ciudades where Ciudad = '%1$s';";
                String query = String.format(textoQuery, ciudadAModificar);
                System.out.println(query);
                Integer filasAfectadas = conector.ejecutarActualizacion(conexionBD, query);
                if (filasAfectadas > 0) {
                    JOptionPane.showMessageDialog(this, String.format("Ciudad eliminada exitosamente."));
                    txtCiudadModificar.setText("");
                    actualizarListaCiudadModificar();
                    listaCiudadModificar.setSelectedIndex(-1);

                    conexionBD.close();
                } else {
                    JOptionPane.showMessageDialog(this, String.format("Hubo un error en la eliminación."));
                }
            } catch (NullPointerException ex) {
                JOptionPane.showMessageDialog(this, "Debe seleccionar ciudad");
                //System.out.println(ex.getMessage());
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Error de conexión con base de datos");
                //System.out.println(ex.getMessage());
            }
        }
    }//GEN-LAST:event_btnEliminarCiudadActionPerformed

    private void btnEditarEnfermedadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarEnfermedadActionPerformed
        Connection conexionBD = conector.crearConexion();
        if (conexionBD == null) {
            JOptionPane.showConfirmDialog(this, "No se pudo crear la conexion");
        } else {
            try {
                if (!txtEnfermedadModificar.getText().trim().isBlank()) {
                    String enfermedadAnterior = listaEnfermedadModificar.getSelectedItem().toString();
                    String enfermedadNueva = txtEnfermedadModificar.getText().trim();
                    String especialidad = listaEnfermedadEspecialidadModificar.getSelectedItem().toString();
                    String textoQuerySelect = "Select Id from Especialidades where Especialidad = '%1$s';";
                    String querySelect = String.format(textoQuerySelect, especialidad);
                    ResultSet resultados = conector.ejecutarQuery(conexionBD, querySelect);
                    //String idEspecialidad = conector.dato;
                    String idEspecialidad = resultados.getString("Id");
                    System.out.println(idEspecialidad);

                    if (JOptionPane.showConfirmDialog(this, "Está seguro de modificar?") == 0) {
                        String textoQuery = "update Enfermedades SET Enfermedad = '%1$s', Id_Especialidad = '%2$s' where Enfermedad = '%3$s';";
                        String query = String.format(textoQuery, enfermedadNueva, idEspecialidad, enfermedadAnterior);
                        System.out.println(query);
                        System.out.println(conexionBD);
                        int filasAfectadas = conector.ejecutarActualizacion(conexionBD, query);
                        System.out.println(filasAfectadas);

                        if (filasAfectadas > 0) {
                            JOptionPane.showMessageDialog(this, String.format("Enfermedad editada exitosamente."));
                            txtEnfermedadModificar.setText("");
                            actualizarListaEnfermedadModificar();
                            listaEnfermedadEspecialidadModificar.setSelectedIndex(-1);
                            listaEnfermedadModificar.setEnabled(true);
                            listaEnfermedadModificar.setSelectedIndex(-1);

                            conexionBD.close();
                        } else {
                            JOptionPane.showMessageDialog(this, String.format("La enfermedad ya existe."));
                        }

                    }

                } else {
                    JOptionPane.showMessageDialog(this, String.format("Debe escribir una enfermedad"));
                }
            } catch (NullPointerException e) {
                JOptionPane.showMessageDialog(this, String.format("Debe seleccionar datos de las listas"));
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, String.format("Error de Conexión"));
            }
        }
    }//GEN-LAST:event_btnEditarEnfermedadActionPerformed

    private void btnIngresarEnfermedadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIngresarEnfermedadActionPerformed
        Connection conexionBD = conector.crearConexion();
        if (conexionBD == null) {
            JOptionPane.showConfirmDialog(this, "No se pudo crear la conexion");
        } else {
            try {
                String enfermedad = txtEnfermedadIngresar.getText().trim();
                String especialidad = listaEnfermedadEspecialidadIngresar.getSelectedItem().toString();
                String textoQuerySelect = "Select * from Especialidades where Especialidad = '%1$s';";
                String querySelect = String.format(textoQuerySelect, especialidad);
                ResultSet resultados = conector.ejecutarQuery(conexionBD, querySelect);
                Integer idEspecialidad = resultados.getInt("Id");
                String textoQuery = "insert into Enfermedades (Enfermedad, Id_Especialidad) VALUES ('%1$s', %2$d);";
                String query = String.format(textoQuery, enfermedad, idEspecialidad);
                //System.out.println(query);
                Integer filasAfectadas = conector.ejecutarActualizacion(conexionBD, query);
                if (filasAfectadas > 0) {
                    JOptionPane.showMessageDialog(this, String.format("Enfermedad creada exitosamente."));
                    txtEnfermedadIngresar.setText("");
                    actualizarListaEnfermedadModificar();
                    listaEnfermedadEspecialidadIngresar.setSelectedIndex(-1);

                    conexionBD.close();
                } else {
                    JOptionPane.showMessageDialog(this, String.format("La enfermedad ya existe."));
                }

                //} else {
                //    JOptionPane.showMessageDialog(this, String.format("Debe escribir una enfermedad"));
                //}
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(this, String.format("Debe en la lista"));
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, String.format("Error de Conexión"));
        }
        }
    }//GEN-LAST:event_btnIngresarEnfermedadActionPerformed

    private void btnEditarEspecialidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarEspecialidadActionPerformed
        Connection conexionBD = conector.crearConexion();
        if (conexionBD == null) {
            JOptionPane.showConfirmDialog(this, "No se pudo crear la conexion");
        } else {
            try {
                String especialidad = txtEspecialidadModificar.getText().trim();
                String especialidadAModificar = listaEspecialidadModificar.getSelectedItem().toString();
                if (!especialidad.isBlank()) {
                    String textoQuery = "update Especialidades Set Especialidad = '%1$s' Where Especialidad = '%2$s';";
                    String query = String.format(textoQuery, especialidad, especialidadAModificar);
                    System.out.println(query);
                    Integer filasAfectadas = conector.ejecutarActualizacion(conexionBD, query);
                    if (filasAfectadas > 0) {
                        JOptionPane.showMessageDialog(this, String.format("Especialidad modificada exitosamente."));
                        txtEspecialidadModificar.setText("");
                        actualizarListaEspecialidadModificar();
                        listaEspecialidadModificar.setSelectedIndex(-1);

                        conexionBD.close();
                    } else {
                        JOptionPane.showMessageDialog(this, String.format("La especialidad ya existe."));
                    }
                } else {
                    JOptionPane.showMessageDialog(this, String.format("Debe escribir una especialidad"));
                }
            } catch (NullPointerException ex) {
                JOptionPane.showMessageDialog(this, "Debe seleccionar especialidad");
                //System.out.println(ex.getMessage());
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Error de conexión con base de datos");
                //System.out.println(ex.getMessage());
            }
        }
    }//GEN-LAST:event_btnEditarEspecialidadActionPerformed

    private void btnEditarEpsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarEpsActionPerformed
        Connection conexionBD = conector.crearConexion();
        if (conexionBD == null) {
            JOptionPane.showConfirmDialog(this, "No se pudo crear la conexion");
        } else {
            try {
                String eps = txtEpsModificar.getText().trim();
                String epsAModificar = listaEpsModificar.getSelectedItem().toString();
                if (!eps.isBlank()) {
                    String textoQuery = "update EPS Set EPS = '%1$s' Where EPS = '%2$s';";
                    String query = String.format(textoQuery, eps, epsAModificar);
                    System.out.println(query);
                    Integer filasAfectadas = conector.ejecutarActualizacion(conexionBD, query);
                    if (filasAfectadas > 0) {
                        JOptionPane.showMessageDialog(this, String.format("Eps modificada exitosamente."));
                        txtEpsModificar.setText("");
                        actualizarListaEpsModificar();
                        listaEpsModificar.setSelectedIndex(-1);

                        conexionBD.close();
                    } else {
                        JOptionPane.showMessageDialog(this, String.format("La eps ya existe."));
                    }
                } else {
                    JOptionPane.showMessageDialog(this, String.format("Debe escribir una eps"));
                }
            } catch (NullPointerException ex) {
                JOptionPane.showMessageDialog(this, "Debe seleccionar Eps");
                //System.out.println(ex.getMessage());
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Error en conexión con Base de Datos");
                //System.out.println(ex.getMessage());
            }
        }
    }//GEN-LAST:event_btnEditarEpsActionPerformed

    private void btnEditarCiudadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarCiudadActionPerformed
        Connection conexionBD = conector.crearConexion();
        if (conexionBD == null) {
            JOptionPane.showConfirmDialog(this, "No se pudo crear la conexion");
        } else {
            try {
                String ciudad = txtCiudadModificar.getText().trim();
                String ciudadAModificar = listaCiudadModificar.getSelectedItem().toString();
                if (!ciudad.isBlank()) {
                    String textoQuery = "update Ciudades Set Ciudad = '%1$s' Where Ciudad = '%2$s';";
                    String query = String.format(textoQuery, ciudad, ciudadAModificar);
                    System.out.println(query);
                    Integer filasAfectadas = conector.ejecutarActualizacion(conexionBD, query);
                    if (filasAfectadas > 0) {
                        JOptionPane.showMessageDialog(this, String.format("Ciudad modificada exitosamente."));
                        txtCiudadModificar.setText("");
                        actualizarListaCiudadModificar();
                        listaCiudadModificar.setSelectedIndex(-1);

                        conexionBD.close();
                    } else {
                        JOptionPane.showMessageDialog(this, String.format("La ciudad ya existe."));
                    }
                } else {
                    JOptionPane.showMessageDialog(this, String.format("Debe escribir una ciudad"));
                }
            } catch (NullPointerException ex) {
                JOptionPane.showMessageDialog(this, "Debe seleccionar ciudad");
                //System.out.println(ex.getMessage());
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Error de conexión con base de datos");
                //System.out.println(ex.getMessage());
            }
        }
    }//GEN-LAST:event_btnEditarCiudadActionPerformed

    private void btnIngresarEspecialidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIngresarEspecialidadActionPerformed
        Connection conexionBD = conector.crearConexion();
        if (conexionBD == null) {
            JOptionPane.showConfirmDialog(this, "No se pudo crear la conexion");
        } else {
            String especialidad = txtEspecialidadIngresar.getText().trim();
            if (!especialidad.isBlank()) {
                try {
                    String textoQuery = "insert into Especialidades (Especialidad) VALUES ('%1$s');";
                    String query = String.format(textoQuery, especialidad);
                    System.out.println(query);
                    Integer filasAfectadas = conector.ejecutarActualizacion(conexionBD, query);
                    if (filasAfectadas > 0) {
                        JOptionPane.showMessageDialog(this, String.format("Especialidad creada exitosamente."));
                        txtEspecialidadIngresar.setText("");
                        actualizarListaEspecialidadModificar();
                        listaEspecialidadModificar.setSelectedIndex(-1);

                        conexionBD.close();
                    } else {
                        JOptionPane.showMessageDialog(this, String.format("La Especialidad ya existe."));
                    }

                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(this, String.format("Error con conexión de base de datos"));
                }
            } else {
                JOptionPane.showMessageDialog(this, String.format("Debe escribir una Especialidad"));
            }
        }
    }//GEN-LAST:event_btnIngresarEspecialidadActionPerformed

    private void btnIngresarEpsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIngresarEpsActionPerformed
        Connection conexionBD = conector.crearConexion();
        if (conexionBD == null) {
            JOptionPane.showConfirmDialog(this, "No se pudo crear la conexion");
        } else {
            String Eps = txtEpsIngresar.getText().trim();
            if (!Eps.isBlank()) {
                try {
                    String textoQuery = "insert into EPS (EPS) VALUES ('%1$s');";
                    String query = String.format(textoQuery, Eps);
                    System.out.println(query);
                    Integer filasAfectadas = conector.ejecutarActualizacion(conexionBD, query);
                    if (filasAfectadas > 0) {
                        JOptionPane.showMessageDialog(this, String.format("Eps creada exitosamente."));
                        txtEpsIngresar.setText("");
                        actualizarListaEpsModificar();

                        conexionBD.close();
                    } else {
                        JOptionPane.showMessageDialog(this, String.format("La Eps ya existe."));
                    }
                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(this, String.format("Error con conexión a base de datos"));
                }
            } else {
                JOptionPane.showMessageDialog(this, String.format("Debe escribir una Eps"));
            }
        }
    }//GEN-LAST:event_btnIngresarEpsActionPerformed

    private void btnIngresarCiudadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIngresarCiudadActionPerformed
        Connection conexionBD = conector.crearConexion();
        if (conexionBD == null) {
            JOptionPane.showConfirmDialog(this, "No se pudo crear la conexion");
        } else {
            String ciudad = txtCiudadIngresar.getText().trim();
            if (!ciudad.isBlank()) {
                try {
                    String textoQuery = "insert into Ciudades (Ciudad) VALUES ('%1$s');";
                    String query = String.format(textoQuery, ciudad);
                    //System.out.println(query);
                    Integer filasAfectadas = conector.ejecutarActualizacion(conexionBD, query);
                    if (filasAfectadas > 0) {
                        JOptionPane.showMessageDialog(this, String.format("Ciudad creada exitosamente."));
                        txtCiudadIngresar.setText("");
                        actualizarListaCiudadModificar();

                        conexionBD.close();
                    } else {
                        JOptionPane.showMessageDialog(this, String.format("La ciudad ya existe."));
                    }
                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(this, String.format("Error en conexión a base de datos"));
                }
            } else {
                JOptionPane.showMessageDialog(this, String.format("Debe escribir una ciudad"));
            }
        }
    }//GEN-LAST:event_btnIngresarCiudadActionPerformed

    private void btnLimpiarMedicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarMedicoActionPerformed
        txtNombreMedicoModificar.setText("");
        txtCedulaMedicoModificar.setText("");
        listaCiudadMedicoModificar.setSelectedIndex(-1);
        listaEpsMedicoModificar.setSelectedIndex(-1);
        listaEspecialidadMedicoModificar.setSelectedIndex(-1);
        txtCedulaBuscarMedico.setEnabled(true);
        txtCedulaBuscarMedico.setText("");
    }//GEN-LAST:event_btnLimpiarMedicoActionPerformed

    private void btnEliminarMedicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarMedicoActionPerformed
        Connection conexionBD = conector.crearConexion();
        if (conexionBD == null) {
            JOptionPane.showConfirmDialog(this, "No se pudo crear la conexion");
        } else {
            try {
                String cedula = txtCedulaBuscarMedico.getText().trim();
                String textoQuery = "Delete from Medicos where Cedula = '%1$s';";
                String query = String.format(textoQuery, cedula);
                System.out.println(query);
                Integer filasAfectadas = conector.ejecutarActualizacion(conexionBD, query);
                System.out.println(filasAfectadas);
                if (filasAfectadas > 0) {
                    JOptionPane.showMessageDialog(this, String.format("Medico eliminado exitosamente."));
                    txtNombreMedicoModificar.setText("");
                    txtCedulaMedicoModificar.setText("");
                    listaCiudadMedicoModificar.setSelectedIndex(-1);
                    listaEpsMedicoModificar.setSelectedIndex(-1);
                    listaEspecialidadMedicoModificar.setSelectedIndex(-1);
                    txtCedulaBuscarMedico.setEnabled(true);
                    txtCedulaBuscarMedico.setText("");

                    conexionBD.close();
                } else {
                    JOptionPane.showMessageDialog(this, String.format("Hubo un error en la eliminación."));
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, String.format("Error de conexión con base de datos"));
            }
        }
    }//GEN-LAST:event_btnEliminarMedicoActionPerformed

    private void btnBuscarMedicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarMedicoActionPerformed
        Connection conexionBD = conector.crearConexion();
        if (conexionBD == null) {
            JOptionPane.showConfirmDialog(this, "No se pudo crear la conexion");
        } else {
            try {
                String cedula = txtCedulaBuscarMedico.getText().trim();
                String textoQuerySelect = "Select * from Medicos where Cedula = '%1$s';";
                String querySelect = String.format(textoQuerySelect, cedula);
                ResultSet resultados = conector.ejecutarQuery(conexionBD, querySelect);
                String nombreEditar = resultados.getString("Nombre");
                String cedulaEditar = resultados.getString("Cedula");
                txtNombreMedicoModificar.setText(nombreEditar);
                txtCedulaMedicoModificar.setText(cedulaEditar);
                String idCiudad = resultados.getString("Id_Ciudad");
                String idEps = resultados.getString("Id_EPS");
                String idEspecialidad = resultados.getString("Id_Especialidad");
                String textoQuerySelect2 = "Select * from Ciudades where Id = '%1$s';";
                String querySelect2 = String.format(textoQuerySelect2, idCiudad);
                ResultSet resultados2 = conector.ejecutarQuery(conexionBD, querySelect2);
                listaCiudadMedicoModificar.setSelectedItem(resultados2.getString("Ciudad"));
                String textoQuerySelect3 = "Select * from EPS where Id = '%1$s';";
                String querySelect3 = String.format(textoQuerySelect3, idEps);
                ResultSet resultados3 = conector.ejecutarQuery(conexionBD, querySelect3);
                listaEpsMedicoModificar.setSelectedItem(resultados3.getString("EPS"));
                String textoQuerySelect4 = "Select * from Especialidades where Id = '%1$s';";
                String querySelect4 = String.format(textoQuerySelect4, idEspecialidad);
                ResultSet resultados4 = conector.ejecutarQuery(conexionBD, querySelect4);
                listaEspecialidadMedicoModificar.setSelectedItem(resultados4.getString("Especialidad"));

                txtCedulaBuscarMedico.setEnabled(false);
                conexionBD.close();

            } catch (NullPointerException e) {
                JOptionPane.showMessageDialog(this, String.format("Debe seleccionar un dato de la lista"));
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, String.format("Error de Conexión o el medico no existe"));
            }
        }
    }//GEN-LAST:event_btnBuscarMedicoActionPerformed

    private void btnEditarMedicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarMedicoActionPerformed
        Connection conexionBD = conector.crearConexion();
        if (conexionBD == null) {
            JOptionPane.showConfirmDialog(this, "No se pudo crear la conexion");
        } else {
            try {
                String cedulaBuscar = txtCedulaBuscarMedico.getText().trim();
                String nombre = txtNombreMedicoModificar.getText().trim();
                String cedula = txtCedulaMedicoModificar.getText().trim();
                String ciudad = listaCiudadMedicoModificar.getSelectedItem().toString();
                String eps = listaEpsMedicoModificar.getSelectedItem().toString();
                String especialidad = listaEspecialidadMedicoModificar.getSelectedItem().toString();
                if (!nombre.isBlank() && !cedula.isBlank()) {
                    //obtener el Id de la ciudad
                    String textoQuerySelect = "Select * from Ciudades where Ciudad = '%1$s';";
                    String querySelect = String.format(textoQuerySelect, ciudad);
                    ResultSet resultados = conector.ejecutarQuery(conexionBD, querySelect);
                    Integer idCiudad = resultados.getInt("Id");
                    //Obtener el Id de la eps
                    textoQuerySelect = "Select * from EPS where EPS = '%1$s';";
                    querySelect = String.format(textoQuerySelect, eps);
                    resultados = conector.ejecutarQuery(conexionBD, querySelect);
                    Integer idEps = resultados.getInt("Id");
                    //Obtener el Id de la especialidad
                    textoQuerySelect = "Select * from Especialidades where Especialidad = '%1$s';";
                    querySelect = String.format(textoQuerySelect, especialidad);
                    resultados = conector.ejecutarQuery(conexionBD, querySelect);
                    Integer idEspecialidad = resultados.getInt("Id");
                    //ahora actualizar en tabla Medicos
                    String textoQuery = "update Medicos Set Nombre = '%1$s', Cedula = '%2$s', Id_Ciudad = %3$d, Id_EPS = %4$d, Id_Especialidad = %5$d where Cedula = '%6$s';";
                    String query = String.format(textoQuery, nombre, cedula, idCiudad, idEps, idEspecialidad, cedulaBuscar);
                    System.out.println(query);
                    Integer filasAfectadas = conector.ejecutarActualizacion(conexionBD, query);
                    if (filasAfectadas > 0) {
                        JOptionPane.showMessageDialog(this, String.format("Medico editado exitosamente."));
                        txtNombreMedicoModificar.setText("");
                        txtCedulaMedicoModificar.setText("");
                        listaCiudadMedicoModificar.setSelectedIndex(-1);
                        listaEpsMedicoModificar.setSelectedIndex(-1);
                        listaEspecialidadMedicoModificar.setSelectedIndex(-1);
                        txtCedulaBuscarMedico.setEnabled(true);
                        txtCedulaBuscarMedico.setText("");

                        conexionBD.close();
                    } else {
                        JOptionPane.showMessageDialog(this, String.format("El medico con esa cedula ya existe."));
                    }
                } else {
                    JOptionPane.showMessageDialog(this, String.format("Debe completar los datos. Todos son obligatorios"));
                }
            } catch (SQLException e) {
                JOptionPane.showConfirmDialog(this, "Error en la conexión con Base de Datos");
            } catch (NullPointerException e) {
                JOptionPane.showConfirmDialog(this, "Debe seleccionar todos los campos");
            } catch (NumberFormatException e) {
                JOptionPane.showConfirmDialog(this, "Debe escribir una edad válida");
            }
        }
    }//GEN-LAST:event_btnEditarMedicoActionPerformed

    private void btnIngresarMedicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIngresarMedicoActionPerformed
        Connection conexionBD = conector.crearConexion();
        if (conexionBD == null) {
            JOptionPane.showConfirmDialog(this, "No se pudo crear la conexion");
        } else {
            try {
                String nombre = txtNombreMedico.getText().trim();
                String cedula = txtCedulaMedico.getText().trim();
                String ciudad = listaCiudadMedico.getSelectedItem().toString();
                String eps = listaEpsMedico.getSelectedItem().toString();
                String especialidad = listaEspecialidadMedico.getSelectedItem().toString();
                if (!nombre.isBlank() && !cedula.isBlank()) {
                    //obtener el Id de la ciudad
                    String textoQuerySelect = "Select * from Ciudades where Ciudad = '%1$s';";
                    String querySelect = String.format(textoQuerySelect, ciudad);
                    ResultSet resultados = conector.ejecutarQuery(conexionBD, querySelect);
                    Integer idCiudad = resultados.getInt("Id");
                    //Obtener el Id de la eps
                    textoQuerySelect = "Select * from EPS where EPS = '%1$s';";
                    querySelect = String.format(textoQuerySelect, eps);
                    resultados = conector.ejecutarQuery(conexionBD, querySelect);
                    Integer idEps = resultados.getInt("Id");
                    //Obtener el Id de la especialidad
                    textoQuerySelect = "Select * from Especialidades where Especialidad = '%1$s';";
                    querySelect = String.format(textoQuerySelect, especialidad);
                    resultados = conector.ejecutarQuery(conexionBD, querySelect);
                    Integer idEspecialidad = resultados.getInt("Id");
                    //ahora insertar en tabla Pacientes
                    String textoQuery = "insert into Medicos (Nombre, Cedula, Id_Ciudad, Id_EPS, Id_Especialidad) VALUES ('%1$s', '%2$s', %3$d, %4$d, %5$d);";
                    String query = String.format(textoQuery, nombre, cedula, idCiudad, idEps, idEspecialidad);
                    System.out.println(query);
                    Integer filasAfectadas = conector.ejecutarActualizacion(conexionBD, query);
                    if (filasAfectadas > 0) {
                        JOptionPane.showMessageDialog(this, String.format("Medico creado exitosamente."));
                        txtNombreMedico.setText("");
                        txtCedulaMedico.setText("");
                        listaCiudadMedico.setSelectedIndex(-1);
                        listaEpsMedico.setSelectedIndex(-1);
                        listaEspecialidadMedico.setSelectedIndex(-1);

                        conexionBD.close();
                    } else {
                        JOptionPane.showMessageDialog(this, String.format("El medico con esa cedula ya existe."));
                    }
                } else {
                    JOptionPane.showMessageDialog(this, String.format("Debe completar los datos. Todos son obligatorios"));
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Error en la conexión con Base de Datos");
            } catch (NullPointerException e) {
                JOptionPane.showMessageDialog(this, "Debe seleccionar todos los campos");
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Debe escribir una edad válida");
            }
        }
    }//GEN-LAST:event_btnIngresarMedicoActionPerformed

    private void btnBuscarMedicoAsignarModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarMedicoAsignarModificarActionPerformed
        Connection conexionBD = conector.crearConexion();
        if (conexionBD == null) {
            JOptionPane.showConfirmDialog(this, "No se pudo crear la conexion");
        } else {
            try {
                String especialidad = listaEnfermedadAsignarModificar.getSelectedItem().toString().split(" - ")[1].trim();
                String ciudad = txtCiudadAsignarModificar.getText();
                String eps = txtEpsAsignarModificar.getText();
                //Buscar el idEspecialidad por medio de la especialidad
                String textoQuerySelect = "Select * from Especialidades where Especialidad = '%1$s';";
                String querySelect = String.format(textoQuerySelect, especialidad);
                ResultSet resultados = conector.ejecutarQuery(conexionBD, querySelect);
                String idEspecialidad = resultados.getString("Id");
                //Buscar el Id_Ciudad por medio de la ciudad
                textoQuerySelect = "Select * from Ciudades where Ciudad = '%1$s';";
                querySelect = String.format(textoQuerySelect, ciudad);
                resultados = conector.ejecutarQuery(conexionBD, querySelect);
                String idCiudad = resultados.getString("Id");
                //Buscar el Id_EPS por medio de la Eps
                textoQuerySelect = "Select * from EPS where EPS = '%1$s';";
                querySelect = String.format(textoQuerySelect, eps);
                resultados = conector.ejecutarQuery(conexionBD, querySelect);
                String idEps = resultados.getString("Id");
                //Traer lista de medicos según el IdEspecialidad, IdCiudad, IdEps
                textoQuerySelect = "Select * from Medicos where Id_Especialidad = '%1$s' AND Id_Ciudad = '%2$s' AND Id_EPS = '%3$s';";
                querySelect = String.format(textoQuerySelect, idEspecialidad, idCiudad, idEps);
                ResultSet medicos = conector.ejecutarQuery(conexionBD, querySelect);
                limpiarListaMedicoAsignarModificar();
                DefaultComboBoxModel comboBoxMedicoAsignarModificar = (DefaultComboBoxModel) listaMedicoAsignarModificar.getModel();
                while (medicos.next()) {
                    String idMedico = medicos.getString("Id");
                    String medico = medicos.getString("Nombre");
                    comboBoxMedicoAsignarModificar.addElement(idMedico + " - " + medico);
                }
                listaMedicoAsignarModificar.setModel(comboBoxMedicoAsignarModificar);
                listaMedicoAsignarModificar.setSelectedIndex(-1);

                listaEnfermedadAsignarModificar.setEnabled(false);

                conexionBD.close();

            } catch (NullPointerException e) {
                JOptionPane.showMessageDialog(this, String.format("Debe seleccionar un dato de la lista"));
                //System.out.println(e.getMessage());
            } catch (SQLException e) {
                System.out.println(e.getMessage());
                JOptionPane.showMessageDialog(this, String.format("Error de Conexión o no hay medicos disponibles para esa eps, ciudad y especialidad"));
            }
        }
    }//GEN-LAST:event_btnBuscarMedicoAsignarModificarActionPerformed

    private void btnBuscarMedicoAsignarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarMedicoAsignarActionPerformed
        Connection conexionBD = conector.crearConexion();
        if (conexionBD == null) {
            JOptionPane.showConfirmDialog(this, "No se pudo crear la conexion");
        } else {
            try {
                String especialidad = listaEnfermedadAsignar.getSelectedItem().toString().split(" - ")[1].trim();
                System.out.println(especialidad);
                String ciudad = txtCiudadAsignar.getText();
                String eps = txtEpsAsignar.getText();
                //Buscar el idEspecialidad por medio de la especialidad
                String textoQuerySelect = "Select * from Especialidades where Especialidad = '%1$s';";
                String querySelect = String.format(textoQuerySelect, especialidad);
                ResultSet resultados = conector.ejecutarQuery(conexionBD, querySelect);
                String idEspecialidad = resultados.getString("Id");
                //Buscar el Id_Ciudad por medio de la ciudad
                textoQuerySelect = "Select * from Ciudades where Ciudad = '%1$s';";
                querySelect = String.format(textoQuerySelect, ciudad);
                resultados = conector.ejecutarQuery(conexionBD, querySelect);
                String idCiudad = resultados.getString("Id");
                //Buscar el Id_EPS por medio de la Eps
                textoQuerySelect = "Select * from EPS where EPS = '%1$s';";
                querySelect = String.format(textoQuerySelect, eps);
                resultados = conector.ejecutarQuery(conexionBD, querySelect);
                String idEps = resultados.getString("Id");
                //Traer lista de medicos según el IdEspecialidad, IdCiudad, IdEps
                textoQuerySelect = "Select * from Medicos where Id_Especialidad = '%1$s' AND Id_Ciudad = '%2$s' AND Id_EPS = '%3$s';";
                querySelect = String.format(textoQuerySelect, idEspecialidad, idCiudad, idEps);
                ResultSet medicos = conector.ejecutarQuery(conexionBD, querySelect);
                limpiarListaMedicoAsignar();
                DefaultComboBoxModel comboBoxMedicoAsignar = (DefaultComboBoxModel) listaMedicoAsignar.getModel();
                while (medicos.next()) {
                    String idMedico = medicos.getString("Id");
                    String medico = medicos.getString("Nombre");
                    comboBoxMedicoAsignar.addElement(idMedico + " - " + medico);
                }
                listaMedicoAsignar.setModel(comboBoxMedicoAsignar);
                listaMedicoAsignar.setSelectedIndex(-1);

                listaEnfermedadAsignar.setEnabled(false);

                conexionBD.close();

            } catch (NullPointerException e) {
                JOptionPane.showMessageDialog(this, String.format("Debe seleccionar un dato de la lista"));
                //System.out.println(e.getMessage());
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, String.format("Error de Conexión o no hay medicos disponibles para esa eps, ciudad y especialidad"));
            }
        }
    }//GEN-LAST:event_btnBuscarMedicoAsignarActionPerformed

    private void btnAsignarEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAsignarEliminarActionPerformed
        Connection conexionBD = conector.crearConexion();
        if (conexionBD == null) {
            JOptionPane.showConfirmDialog(this, "No se pudo crear la conexion");
        } else {
            try {
                String idAsignacion = listaAsignaciones.getSelectedItem().toString().split(" | ")[0].trim();
                if (!idAsignacion.isBlank()) {
                    //ahora eliminar registro en tabla Asignaciones
                    String textoQuery = "delete from Asignaciones where Id = '%1$s';";
                    String query = String.format(textoQuery, idAsignacion);
                    Integer filasAfectadas = conector.ejecutarActualizacion(conexionBD, query);
                    if (filasAfectadas > 0) {
                        JOptionPane.showMessageDialog(this, String.format("Asignación médica eliminada exitosamente."));
                        txtNombreAsignarModificar.setText("");
                        txtCedulaAsignarModificar.setText("");
                        txtCiudadAsignarModificar.setText("");
                        txtEpsAsignarModificar.setText("");
                        listaEnfermedadAsignarModificar.setSelectedIndex(-1);
                        listaMedicoAsignarModificar.setSelectedIndex(-1);
                        listaAsignaciones.setSelectedIndex(-1);
                        limpiarListaEnfermedadAsignarModificar();
                        limpiarListaMedicoAsignarModificar();
                        limpiarListaAsignaciones();

                        txtCedulaAsignarModificar.setEnabled(true);
                        listaEnfermedadAsignarModificar.setEnabled(true);
                        actualizarListaEnfermedadAsignar();

                        conexionBD.close();
                    } else {
                        JOptionPane.showMessageDialog(this, String.format("Hubo un error. Intentelo de nuevo"));
                    }
                } else {
                    JOptionPane.showMessageDialog(this, String.format("Debe seleccionar una asignación"));
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Error en la conexión con Base de Datos");
                System.out.println(e.getMessage());
            } catch (NullPointerException e) {
                JOptionPane.showMessageDialog(this, "Debe seleccionar seleccionar una asignación");
            }
        }
    }//GEN-LAST:event_btnAsignarEliminarActionPerformed

    private void btnAsignarModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAsignarModificarActionPerformed
        Connection conexionBD = conector.crearConexion();
        if (conexionBD == null) {
            JOptionPane.showConfirmDialog(this, "No se pudo crear la conexion");
        } else {
            try {
                String idAsignacion = listaAsignaciones.getSelectedItem().toString().split(" | ")[0].trim();
                String cedula = txtCedulaAsignarModificar.getText().trim();
                String enfermedad = listaEnfermedadAsignarModificar.getSelectedItem().toString().split(" - ")[0].trim();
                String especialidad = listaEnfermedadAsignarModificar.getSelectedItem().toString().split(" - ")[1].trim();
                String idMedico = listaMedicoAsignarModificar.getSelectedItem().toString().split(" | ")[0].trim();
                if (!cedula.isBlank() && !enfermedad.isBlank() && !especialidad.isBlank() && !idMedico.isBlank()) {
                    //obtener el Id del paciente
                    String textoQuerySelect = "Select * from Pacientes where Cedula = '%1$s';";
                    String querySelect = String.format(textoQuerySelect, cedula);
                    ResultSet resultados = conector.ejecutarQuery(conexionBD, querySelect);
                    Integer idPaciente = resultados.getInt("Id");
                    System.out.println("idPaciente: " + idPaciente);
                    //Obtener el Id de la enfermedad
                    textoQuerySelect = "Select * from Enfermedades where Enfermedad = '%1$s';";
                    querySelect = String.format(textoQuerySelect, enfermedad);
                    System.out.println(querySelect);
                    resultados = conector.ejecutarQuery(conexionBD, querySelect);
                    Integer idEnfermedad = resultados.getInt("Id");
                    System.out.println("idEnfermedad: " + idEnfermedad);
                    //ahora actualizar registro en tabla Asignaciones
                    String textoQuery = "update Asignaciones Set Id_Paciente = '%1$s', Id_Enfermedad = '%2$s', Id_Medico = '%3$s' where Id = '%4$s';";
                    String query = String.format(textoQuery, idPaciente, idEnfermedad, idMedico, idAsignacion);
                    System.out.println(query);
                    Integer filasAfectadas = conector.ejecutarActualizacion(conexionBD, query);
                    if (filasAfectadas > 0) {
                        JOptionPane.showMessageDialog(this, String.format("Asignación médica modificada exitosamente."));
                        txtNombreAsignarModificar.setText("");
                        txtCedulaAsignarModificar.setText("");
                        txtCiudadAsignarModificar.setText("");
                        txtEpsAsignarModificar.setText("");
                        listaEnfermedadAsignarModificar.setSelectedIndex(-1);
                        listaMedicoAsignarModificar.setSelectedIndex(-1);
                        listaAsignaciones.setSelectedIndex(-1);
                        limpiarListaEnfermedadAsignarModificar();
                        limpiarListaMedicoAsignarModificar();
                        limpiarListaAsignaciones();

                        txtCedulaAsignarModificar.setEnabled(true);
                        listaEnfermedadAsignarModificar.setEnabled(true);
                        actualizarListaEnfermedadAsignar();

                        conexionBD.close();
                    } else {
                        JOptionPane.showMessageDialog(this, String.format("Hubo un error. Intentelo de nuevo"));
                    }
                } else {
                    JOptionPane.showMessageDialog(this, String.format("Debe completar los datos. Todos son obligatorios"));
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Error en la conexión con Base de Datos");
                System.out.println(e.getMessage());
            } catch (NullPointerException e) {
                JOptionPane.showMessageDialog(this, "Debe seleccionar todos los campos");
            }
        }
    }//GEN-LAST:event_btnAsignarModificarActionPerformed

    private void btnLimpiarAsignarModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarAsignarModificarActionPerformed
        txtNombreAsignarModificar.setText("");
        txtCedulaAsignarModificar.setText("");
        txtCiudadAsignarModificar.setText("");
        txtEpsAsignarModificar.setText("");
        listaEnfermedadAsignarModificar.setSelectedIndex(-1);
        listaMedicoAsignarModificar.setSelectedIndex(-1);
        listaAsignaciones.setSelectedIndex(-1);
        limpiarListaEnfermedadAsignarModificar();
        limpiarListaMedicoAsignarModificar();
        limpiarListaAsignaciones();

        txtCedulaAsignarModificar.setEnabled(true);
        listaEnfermedadAsignarModificar.setEnabled(true);
        actualizarListaEnfermedadAsignar();
    }//GEN-LAST:event_btnLimpiarAsignarModificarActionPerformed

    private void btnBuscarAsignarModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarAsignarModificarActionPerformed
        Connection conexionBD = conector.crearConexion();
        if (conexionBD == null) {
            JOptionPane.showConfirmDialog(this, "No se pudo crear la conexion");
        } else {
            try {
                String cedula = txtCedulaAsignarModificar.getText().trim();
                //Buscar al paciente por medio del cedula
                String textoQuerySelect = "Select * from Pacientes where Cedula = '%1$s';";
                String querySelect = String.format(textoQuerySelect, cedula);
                ResultSet resultados = conector.ejecutarQuery(conexionBD, querySelect);
                String idPaciente = resultados.getString("Id");
                String nombre = resultados.getString("Nombre");
                txtNombreAsignarModificar.setText(nombre);
                String idCiudad = resultados.getString("Id_Ciudad");
                String idEps = resultados.getString("Id_EPS");
                //Buscar la ciudad por medio del IdCiudad
                textoQuerySelect = "Select * from Ciudades where Id = '%1$s';";
                querySelect = String.format(textoQuerySelect, idCiudad);
                resultados = conector.ejecutarQuery(conexionBD, querySelect);
                String ciudad = resultados.getString("Ciudad");
                txtCiudadAsignarModificar.setText(ciudad);
                //Buscar la EPS por medio del IdEps
                textoQuerySelect = "Select * from EPS where Id = '%1$s';";
                querySelect = String.format(textoQuerySelect, idEps);
                resultados = conector.ejecutarQuery(conexionBD, querySelect);
                String eps = resultados.getString("EPS");
                txtEpsAsignarModificar.setText(eps);

                //Traer lista de asignaciones del idPaciente
                textoQuerySelect = "Select * from Asignaciones where Id_Paciente = '%1$s';";
                querySelect = String.format(textoQuerySelect, idPaciente);
                ResultSet asignaciones = conector.ejecutarQuery(conexionBD, querySelect);
                limpiarListaAsignaciones();
                DefaultComboBoxModel comboBoxAsignaciones = (DefaultComboBoxModel) listaAsignaciones.getModel();
                while (asignaciones.next()) {
                    String idAsignacion = asignaciones.getString("Id");
                    String idEnfermedad = asignaciones.getString("Id_Enfermedad");
                    String idMedico = asignaciones.getString("Id_Medico");
                    //Buscar la enfermedad por medio del IdEnfermedad
                    textoQuerySelect = "Select * from Enfermedades where Id = '%1$s';";
                    querySelect = String.format(textoQuerySelect, idEnfermedad);
                    resultados = conector.ejecutarQuery(conexionBD, querySelect);
                    String enfermedad = resultados.getString("Enfermedad");
                    String idEspecialidad = resultados.getString("Id_Especialidad");
                    //Buscar el medico por medio del IdMedico
                    textoQuerySelect = "Select * from Medicos where Id = '%1$s';";
                    querySelect = String.format(textoQuerySelect, idMedico);
                    resultados = conector.ejecutarQuery(conexionBD, querySelect);
                    String medico = resultados.getString("Nombre");
                    //String idEspecialidad = resultados.getString("Id_Especialidad");

                    //Buscar la especialidad por medio del idEspecialidad
                    textoQuerySelect = "Select * from Especialidades where Id = '%1$s';";
                    querySelect = String.format(textoQuerySelect, idEspecialidad);
                    resultados = conector.ejecutarQuery(conexionBD, querySelect);
                    String especialidad = resultados.getString("Especialidad");

                    String enfermedadEspecialidad = idAsignacion + " | " + enfermedad + " | " + especialidad + " | " + "Medico: " + medico;
                    comboBoxAsignaciones.addElement(enfermedadEspecialidad);
                }
                listaAsignaciones.setModel(comboBoxAsignaciones);
                listaAsignaciones.setSelectedIndex(-1);
                txtCedulaAsignarModificar.setEnabled(false);

                conexionBD.close();

            } catch (NullPointerException e) {
                JOptionPane.showMessageDialog(this, String.format("Debe seleccionar un dato de la lista"));
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, String.format("Error de Conexión o el paciente no existe"));
            }
        }
    }//GEN-LAST:event_btnBuscarAsignarModificarActionPerformed

    private void btnAsignarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAsignarActionPerformed
        Connection conexionBD = conector.crearConexion();
        if (conexionBD == null) {
            JOptionPane.showConfirmDialog(this, "No se pudo crear la conexion");
        } else {
            try {
                String cedula = txtCedulaAsignar.getText().trim();
                String enfermedad = listaEnfermedadAsignar.getSelectedItem().toString().split(" - ")[0].trim();
                String especialidad = listaEnfermedadAsignar.getSelectedItem().toString().split(" - ")[1].trim();
                String idMedico = listaMedicoAsignar.getSelectedItem().toString().split(" | ")[0].trim();
                if (!cedula.isBlank() && !enfermedad.isBlank() && !especialidad.isBlank() && !idMedico.isBlank()) {
                    //obtener el Id del paciente
                    String textoQuerySelect = "Select * from Pacientes where Cedula = '%1$s';";
                    String querySelect = String.format(textoQuerySelect, cedula);
                    ResultSet resultados = conector.ejecutarQuery(conexionBD, querySelect);
                    Integer idPaciente = resultados.getInt("Id");
                    System.out.println("idPaciente: " + idPaciente);
                    //Obtener el Id de la enfermedad
                    textoQuerySelect = "Select * from Enfermedades where Enfermedad = '%1$s';";
                    querySelect = String.format(textoQuerySelect, enfermedad);
                    resultados = conector.ejecutarQuery(conexionBD, querySelect);
                    Integer idEnfermedad = resultados.getInt("Id");
                    System.out.println("idEnfermedad: " + idEnfermedad);
                    //ahora insertar en tabla Asignaciones
                    String textoQuery = "insert into Asignaciones (Id_Paciente, Id_Enfermedad, Id_Medico) VALUES ('%1$s', '%2$s', '%3$s');";
                    String query = String.format(textoQuery, idPaciente, idEnfermedad, idMedico);
                    System.out.println(query);
                    Integer filasAfectadas = conector.ejecutarActualizacion(conexionBD, query);
                    if (filasAfectadas > 0) {
                        JOptionPane.showMessageDialog(this, String.format("Asignación médica creada exitosamente."));
                        txtNombreAsignar.setText("");
                        txtCedulaAsignar.setText("");
                        txtCiudadAsignar.setText("");
                        txtEpsAsignar.setText("");
                        listaEnfermedadAsignar.setSelectedIndex(-1);
                        listaMedicoAsignar.setSelectedIndex(-1);
                        limpiarListaEnfermedadAsignar();
                        limpiarListaMedicoAsignar();

                        txtCedulaAsignar.setEnabled(true);
                        actualizarListaEnfermedadAsignar();

                        conexionBD.close();
                    } else {
                        JOptionPane.showMessageDialog(this, String.format("Hubo un error, inténtelo de nuevo."));
                    }
                } else {
                    JOptionPane.showMessageDialog(this, String.format("Debe completar los datos. Todos son obligatorios"));
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Error en la conexión con Base de Datos");
            } catch (NullPointerException e) {
                JOptionPane.showMessageDialog(this, "Debe seleccionar todos los campos");
            }
        }
    }//GEN-LAST:event_btnAsignarActionPerformed

    private void btnLimpiarAsignarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarAsignarActionPerformed
        listaEnfermedadAsignar.setSelectedIndex(-1);
        listaEnfermedadAsignar.setEnabled(true);
        listaMedicoAsignar.setSelectedIndex(-1);
        limpiarListaMedicoAsignar();
        txtCedulaAsignar.setEnabled(true);
        txtCedulaAsignar.setText("");
        txtNombreAsignar.setText("");
        txtCiudadAsignar.setText("");
        txtEpsAsignar.setText("");
    }//GEN-LAST:event_btnLimpiarAsignarActionPerformed

    private void btnBuscarAsignarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarAsignarActionPerformed
        Connection conexionBD = conector.crearConexion();
        if (conexionBD == null) {
            JOptionPane.showConfirmDialog(this, "No se pudo crear la conexion");
        } else {
            try {
                String cedula = txtCedulaAsignar.getText().trim();
                String textoQuerySelect = "Select * from Pacientes where Cedula = '%1$s';";
                String querySelect = String.format(textoQuerySelect, cedula);
                ResultSet resultados = conector.ejecutarQuery(conexionBD, querySelect);
                String nombreAsignar = resultados.getString("Nombre");
                txtNombreAsignar.setText(nombreAsignar);
                String idCiudad = resultados.getString("Id_Ciudad");
                String idEps = resultados.getString("Id_EPS");
                //Buscar la ciudad por medio del Id_Ciudad
                textoQuerySelect = "Select * from Ciudades where Id = '%1$s';";
                querySelect = String.format(textoQuerySelect, idCiudad);
                resultados = conector.ejecutarQuery(conexionBD, querySelect);
                String ciudad = resultados.getString("Ciudad");
                txtCiudadAsignar.setText(ciudad);
                //Buscar la eps por medio del Id_Eps
                textoQuerySelect = "Select * from EPS where Id = '%1$s';";
                querySelect = String.format(textoQuerySelect, idEps);
                resultados = conector.ejecutarQuery(conexionBD, querySelect);
                String eps = resultados.getString("EPS");
                txtEpsAsignar.setText(eps);
                txtCedulaAsignar.setEnabled(false);

                conexionBD.close();

            } catch (NullPointerException e) {
                JOptionPane.showMessageDialog(this, String.format("Debe seleccionar un dato de la lista"));
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, String.format("Error de Conexión o el paciente no existe"));
            }
        }
    }//GEN-LAST:event_btnBuscarAsignarActionPerformed

    private void btnLimpiarPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarPacienteActionPerformed
        txtNombrePacienteModificar.setText("");
        txtCedulaPacienteModificar.setText("");
        txtEdadPacienteModificar.setText("");
        listaCiudadPacienteModificar.setSelectedIndex(-1);
        listaEpsPacienteModificar.setSelectedIndex(-1);
        txtCedulaBuscarPaciente.setEnabled(true);
        txtCedulaBuscarPaciente.setText("");
    }//GEN-LAST:event_btnLimpiarPacienteActionPerformed

    private void btnEliminarPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarPacienteActionPerformed
        Connection conexionBD = conector.crearConexion();
        if (conexionBD == null) {
            JOptionPane.showConfirmDialog(this, "No se pudo crear la conexion");
        } else {
            try {
                String cedula = txtCedulaBuscarPaciente.getText().trim();
                String textoQuery = "Delete from Pacientes where Cedula = '%1$s';";
                String query = String.format(textoQuery, cedula);
                System.out.println(query);
                Integer filasAfectadas = conector.ejecutarActualizacion(conexionBD, query);
                System.out.println(filasAfectadas);
                if (filasAfectadas > 0) {
                    JOptionPane.showMessageDialog(this, String.format("Paciente eliminado exitosamente."));
                    txtNombrePacienteModificar.setText("");
                    txtCedulaPacienteModificar.setText("");
                    txtEdadPacienteModificar.setText("");
                    listaCiudadPacienteModificar.setSelectedIndex(-1);
                    listaEpsPacienteModificar.setSelectedIndex(-1);
                    txtCedulaBuscarPaciente.setEnabled(true);
                    txtCedulaBuscarPaciente.setText("");

                    conexionBD.close();
                } else {
                    JOptionPane.showMessageDialog(this, String.format("Hubo un error en la eliminación."));
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, String.format("Error de conexión con base de datos"));
            }
        }
    }//GEN-LAST:event_btnEliminarPacienteActionPerformed

    private void btnBuscarPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarPacienteActionPerformed
        Connection conexionBD = conector.crearConexion();
        if (conexionBD == null) {
            JOptionPane.showConfirmDialog(this, "No se pudo crear la conexion");
        } else {
            try {
                String cedula = txtCedulaBuscarPaciente.getText().trim();
                String textoQuerySelect = "Select * from Pacientes where Cedula = '%1$s';";
                String querySelect = String.format(textoQuerySelect, cedula);
                ResultSet resultados = conector.ejecutarQuery(conexionBD, querySelect);
                String nombreEditar = resultados.getString("Nombre");
                String cedulaEditar = resultados.getString("Cedula");
                String edadEditar = resultados.getString("Edad");
                txtNombrePacienteModificar.setText(nombreEditar);
                txtCedulaPacienteModificar.setText(cedulaEditar);
                txtEdadPacienteModificar.setText(edadEditar);
                String idCiudad = resultados.getString("Id_Ciudad");
                String idEps = resultados.getString("Id_EPS");
                String textoQuerySelect2 = "Select * from Ciudades where Id = '%1$s';";
                String querySelect2 = String.format(textoQuerySelect2, idCiudad);
                ResultSet resultados2 = conector.ejecutarQuery(conexionBD, querySelect2);
                listaCiudadPacienteModificar.setSelectedItem(resultados2.getString("Ciudad"));
                String textoQuerySelect3 = "Select * from EPS where Id = '%1$s';";
                String querySelect3 = String.format(textoQuerySelect3, idEps);
                ResultSet resultados3 = conector.ejecutarQuery(conexionBD, querySelect3);
                listaEpsPacienteModificar.setSelectedItem(resultados3.getString("EPS"));

                txtCedulaBuscarPaciente.setEnabled(false);
                conexionBD.close();

            } catch (NullPointerException e) {
                JOptionPane.showMessageDialog(this, String.format("Debe seleccionar un dato de la lista"));
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, String.format("Error de Conexión o el paciente no existe"));
            }
        }
    }//GEN-LAST:event_btnBuscarPacienteActionPerformed

    private void btnModificarPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarPacienteActionPerformed
        Connection conexionBD = conector.crearConexion();
        if (conexionBD == null) {
            JOptionPane.showConfirmDialog(this, "No se pudo crear la conexion");
        } else {
            try {
                String cedulaBuscar = txtCedulaBuscarPaciente.getText().trim();
                String nombre = txtNombrePacienteModificar.getText().trim();
                String cedula = txtCedulaPacienteModificar.getText().trim();
                Integer edad = Integer.parseInt(txtEdadPacienteModificar.getText().trim());
                String ciudad = listaCiudadPacienteModificar.getSelectedItem().toString();
                String eps = listaEpsPacienteModificar.getSelectedItem().toString();
                if (!nombre.isBlank() && !cedula.isBlank()) {
                    //obtener el Id de la ciudad
                    String textoQuerySelect = "Select * from Ciudades where Ciudad = '%1$s';";
                    String querySelect = String.format(textoQuerySelect, ciudad);
                    ResultSet resultados = conector.ejecutarQuery(conexionBD, querySelect);
                    Integer idCiudad = resultados.getInt("Id");
                    //Obtener el Id de la eps
                    textoQuerySelect = "Select * from EPS where EPS = '%1$s';";
                    querySelect = String.format(textoQuerySelect, eps);
                    resultados = conector.ejecutarQuery(conexionBD, querySelect);
                    Integer idEps = resultados.getInt("Id");
                    //ahora actualizar en tabla Pacientes
                    String textoQuery = "update Pacientes Set Nombre = '%1$s', Cedula = '%2$s', Edad = %3$d, Id_Ciudad = %4$d, Id_EPS = %5$d where Cedula = '%6$s';";
                    String query = String.format(textoQuery, nombre, cedula, edad, idCiudad, idEps, cedulaBuscar);
                    System.out.println(query);
                    Integer filasAfectadas = conector.ejecutarActualizacion(conexionBD, query);
                    if (filasAfectadas > 0) {
                        JOptionPane.showMessageDialog(this, String.format("Paciente editado exitosamente."));
                        txtNombrePacienteModificar.setText("");
                        txtCedulaPacienteModificar.setText("");
                        txtEdadPacienteModificar.setText("");
                        listaCiudadPacienteModificar.setSelectedIndex(-1);
                        listaEpsPacienteModificar.setSelectedIndex(-1);
                        txtCedulaBuscarPaciente.setEnabled(true);
                        txtCedulaBuscarPaciente.setText("");

                        conexionBD.close();
                    } else {
                        JOptionPane.showMessageDialog(this, String.format("El Paciente con esa cedula ya existe."));
                    }
                } else {
                    JOptionPane.showMessageDialog(this, String.format("Debe completar los datos. Todos son obligatorios"));
                }
            } catch (SQLException e) {
                JOptionPane.showConfirmDialog(this, "Error en la conexión con Base de Datos");
            } catch (NullPointerException e) {
                JOptionPane.showConfirmDialog(this, "Debe seleccionar todos los campos");
            } catch (NumberFormatException e) {
                JOptionPane.showConfirmDialog(this, "Debe escribir una edad válida");
            }
        }
    }//GEN-LAST:event_btnModificarPacienteActionPerformed

    private void btnIngresarPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIngresarPacienteActionPerformed
        Connection conexionBD = conector.crearConexion();
        if (conexionBD == null) {
            JOptionPane.showConfirmDialog(this, "No se pudo crear la conexion");
        } else {
            try {
                String nombre = txtNombrePaciente.getText().trim();
                String cedula = txtCedulaPaciente.getText().trim();
                Integer edad = Integer.parseInt(txtEdadPaciente.getText().trim());
                String ciudad = listaCiudadPaciente.getSelectedItem().toString();
                String eps = listaEpsPaciente.getSelectedItem().toString();
                if (!nombre.isBlank() && !cedula.isBlank()) {
                    //obtener el Id de la ciudad
                    String textoQuerySelect = "Select * from Ciudades where Ciudad = '%1$s';";
                    String querySelect = String.format(textoQuerySelect, ciudad);
                    ResultSet resultados = conector.ejecutarQuery(conexionBD, querySelect);
                    Integer idCiudad = resultados.getInt("Id");
                    //Obtener el Id de la eps
                    textoQuerySelect = "Select * from EPS where EPS = '%1$s';";
                    querySelect = String.format(textoQuerySelect, eps);
                    resultados = conector.ejecutarQuery(conexionBD, querySelect);
                    Integer idEps = resultados.getInt("Id");
                    //ahora insertar en tabla Pacientes
                    String textoQuery = "insert into Pacientes (Nombre, Cedula, Edad, Id_Ciudad, Id_EPS) VALUES ('%1$s', '%2$s', %3$d, %4$d, %5$d);";
                    String query = String.format(textoQuery, nombre, cedula, edad, idCiudad, idEps);
                    System.out.println(query);
                    Integer filasAfectadas = conector.ejecutarActualizacion(conexionBD, query);
                    if (filasAfectadas > 0) {
                        JOptionPane.showMessageDialog(this, String.format("Paciente creado exitosamente."));
                        txtNombrePaciente.setText("");
                        txtCedulaPaciente.setText("");
                        txtEdadPaciente.setText("");
                        listaCiudadPaciente.setSelectedIndex(-1);
                        listaEpsPaciente.setSelectedIndex(-1);

                        conexionBD.close();
                    } else {
                        JOptionPane.showMessageDialog(this, String.format("El Paciente con esa cedula ya existe."));
                    }
                } else {
                    JOptionPane.showMessageDialog(this, String.format("Debe completar los datos. Todos son obligatorios"));
                }
            } catch (SQLException e) {
                JOptionPane.showConfirmDialog(this, "Error en la conexión con Base de Datos");
            } catch (NullPointerException e) {
                JOptionPane.showConfirmDialog(this, "Debe seleccionar todos los campos");
            } catch (NumberFormatException e) {
                JOptionPane.showConfirmDialog(this, "Debe escribir una edad válida");
            }
        }
    }//GEN-LAST:event_btnIngresarPacienteActionPerformed

    private void actualizarListaCiudadModificar() {
        Connection conexionBD = conector.crearConexion();
        String query = "select Id, Ciudad From Ciudades Order by Ciudad;";
        ResultSet ciudades = conector.ejecutarQuery(conexionBD, query);
        limpiarListaCiudadModificar();
        limpiarListaCiudadPaciente();
        limpiarListaCiudadPacienteModificar();
        limpiarListaCiudadMedico();
        limpiarListaCiudadMedicoModificar();

        DefaultComboBoxModel comboBoxCiudades = (DefaultComboBoxModel) listaCiudadModificar.getModel();
        DefaultComboBoxModel comboBoxCiudadesPaciente = (DefaultComboBoxModel) listaCiudadPaciente.getModel();
        DefaultComboBoxModel comboBoxCiudadesPacienteModificar = (DefaultComboBoxModel) listaCiudadPacienteModificar.getModel();
        DefaultComboBoxModel comboBoxCiudadesMedico = (DefaultComboBoxModel) listaCiudadMedico.getModel();
        DefaultComboBoxModel comboBoxCiudadesMedicoModificar = (DefaultComboBoxModel) listaCiudadMedicoModificar.getModel();
        try {
            while (ciudades.next()) {
                //String id = ciudades.getString("Id");
                String ciudad = ciudades.getString("Ciudad");
                comboBoxCiudades.addElement(ciudad);
                comboBoxCiudadesPaciente.addElement(ciudad);
                comboBoxCiudadesPacienteModificar.addElement(ciudad);
                comboBoxCiudadesMedico.addElement(ciudad);
                comboBoxCiudadesMedicoModificar.addElement(ciudad);
            }
            listaCiudadModificar.setModel(comboBoxCiudades);
            listaCiudadModificar.setSelectedIndex(-1);
            listaCiudadPaciente.setModel(comboBoxCiudadesPaciente);
            listaCiudadPaciente.setSelectedIndex(-1);
            listaCiudadPacienteModificar.setModel(comboBoxCiudadesPacienteModificar);
            listaCiudadPacienteModificar.setSelectedIndex(-1);
            listaCiudadMedico.setModel(comboBoxCiudadesMedico);
            listaCiudadMedico.setSelectedIndex(-1);
            listaCiudadMedicoModificar.setModel(comboBoxCiudadesMedicoModificar);
            listaCiudadMedicoModificar.setSelectedIndex(-1);

            conexionBD.close();
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }

    public void limpiarListaCiudadModificar() {
        DefaultComboBoxModel comboBoxVacio = new DefaultComboBoxModel();
        listaCiudadModificar.setModel(comboBoxVacio);
    }

    public void limpiarListaCiudadPaciente() {
        DefaultComboBoxModel comboBoxVacio = new DefaultComboBoxModel();
        listaCiudadPaciente.setModel(comboBoxVacio);
    }

    public void limpiarListaCiudadMedico() {
        DefaultComboBoxModel comboBoxVacio = new DefaultComboBoxModel();
        listaCiudadMedico.setModel(comboBoxVacio);
    }

    public void limpiarListaCiudadPacienteModificar() {
        DefaultComboBoxModel comboBoxVacio = new DefaultComboBoxModel();
        listaCiudadPacienteModificar.setModel(comboBoxVacio);
    }

    public void limpiarListaCiudadMedicoModificar() {
        DefaultComboBoxModel comboBoxVacio = new DefaultComboBoxModel();
        listaCiudadMedicoModificar.setModel(comboBoxVacio);
    }

    private void actualizarListaEpsModificar() {
        Connection conexionBD = conector.crearConexion();
        String query = "select Id, EPS From EPS Order by EPS;";
        ResultSet eps = conector.ejecutarQuery(conexionBD, query);
        limpiarListaEpsModificar();
        limpiarListaEpsPaciente();
        limpiarListaEpsPacienteModificar();
        limpiarListaEpsMedico();
        limpiarListaEpsMedicoModificar();

        DefaultComboBoxModel comboBoxEps = (DefaultComboBoxModel) listaEpsModificar.getModel();
        DefaultComboBoxModel comboBoxEpsPaciente = (DefaultComboBoxModel) listaEpsPaciente.getModel();
        DefaultComboBoxModel comboBoxEpsPacienteModificar = (DefaultComboBoxModel) listaEpsPacienteModificar.getModel();
        DefaultComboBoxModel comboBoxEpsMedico = (DefaultComboBoxModel) listaEpsMedico.getModel();
        DefaultComboBoxModel comboBoxEpsMedicoModificar = (DefaultComboBoxModel) listaEpsMedicoModificar.getModel();
        try {
            while (eps.next()) {
                //String id = ciudades.getString("Id");
                String EPS = eps.getString("EPS");
                comboBoxEps.addElement(EPS);
                comboBoxEpsPaciente.addElement(EPS);
                comboBoxEpsPacienteModificar.addElement(EPS);
                comboBoxEpsMedico.addElement(EPS);
                comboBoxEpsMedicoModificar.addElement(EPS);
            }
            listaEpsModificar.setModel(comboBoxEps);
            listaEpsModificar.setSelectedIndex(-1);
            listaEpsPaciente.setModel(comboBoxEpsPaciente);
            listaEpsPaciente.setSelectedIndex(-1);
            listaEpsPacienteModificar.setModel(comboBoxEpsPacienteModificar);
            listaEpsPacienteModificar.setSelectedIndex(-1);
            listaEpsMedico.setModel(comboBoxEpsMedico);
            listaEpsMedico.setSelectedIndex(-1);
            listaEpsMedicoModificar.setModel(comboBoxEpsMedicoModificar);
            listaEpsMedicoModificar.setSelectedIndex(-1);

            conexionBD.close();
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }

    public void limpiarListaEpsModificar() {
        DefaultComboBoxModel comboBoxVacio = new DefaultComboBoxModel();
        listaEpsModificar.setModel(comboBoxVacio);
    }

    public void limpiarListaEpsPaciente() {
        DefaultComboBoxModel comboBoxVacio = new DefaultComboBoxModel();
        listaEpsPaciente.setModel(comboBoxVacio);
    }

    public void limpiarListaEpsMedico() {
        DefaultComboBoxModel comboBoxVacio = new DefaultComboBoxModel();
        listaEpsMedico.setModel(comboBoxVacio);
    }

    public void limpiarListaEpsPacienteModificar() {
        DefaultComboBoxModel comboBoxVacio = new DefaultComboBoxModel();
        listaEpsPacienteModificar.setModel(comboBoxVacio);
    }

    public void limpiarListaEpsMedicoModificar() {
        DefaultComboBoxModel comboBoxVacio = new DefaultComboBoxModel();
        listaEpsMedicoModificar.setModel(comboBoxVacio);
    }

    private void actualizarListaEspecialidadModificar() {
        Connection conexionBD = conector.crearConexion();
        String query = "select Id, Especialidad From Especialidades Order by Especialidad;";
        ResultSet especialidades = conector.ejecutarQuery(conexionBD, query);
        limpiarListaEspecialidadModificar();
        limpiarListaEnfermedadEspecialidadIngresar();
        limpiarListaEnfermedadEspecialidadModificar();
        limpiarListaEspecialidadMedico();
        limpiarListaEspecialidadMedicoModificar();

        DefaultComboBoxModel comboBoxEspecialidad = (DefaultComboBoxModel) listaEspecialidadModificar.getModel();
        DefaultComboBoxModel comboBoxEspecialidad2 = (DefaultComboBoxModel) listaEnfermedadEspecialidadIngresar.getModel();
        DefaultComboBoxModel comboBoxEspecialidad3 = (DefaultComboBoxModel) listaEnfermedadEspecialidadModificar.getModel();
        DefaultComboBoxModel comboBoxEspecialidadMedico = (DefaultComboBoxModel) listaEspecialidadMedico.getModel();
        DefaultComboBoxModel comboBoxEspecialidadMedicoModificar = (DefaultComboBoxModel) listaEspecialidadMedicoModificar.getModel();
        try {
            while (especialidades.next()) {
                //String id = ciudades.getString("Id");
                String Especialidad = especialidades.getString("Especialidad");
                comboBoxEspecialidad.addElement(Especialidad);
                comboBoxEspecialidad2.addElement(Especialidad);
                comboBoxEspecialidad3.addElement(Especialidad);
                comboBoxEspecialidadMedico.addElement(Especialidad);
                comboBoxEspecialidadMedicoModificar.addElement(Especialidad);
            }
            listaEspecialidadModificar.setModel(comboBoxEspecialidad);
            listaEspecialidadModificar.setSelectedIndex(-1);
            listaEnfermedadEspecialidadIngresar.setModel(comboBoxEspecialidad2);
            listaEnfermedadEspecialidadIngresar.setSelectedIndex(-1);
            listaEnfermedadEspecialidadModificar.setModel(comboBoxEspecialidad3);
            listaEnfermedadEspecialidadModificar.setSelectedIndex(-1);
            listaEspecialidadMedico.setModel(comboBoxEspecialidadMedico);
            listaEspecialidadMedico.setSelectedIndex(-1);
            listaEspecialidadMedicoModificar.setModel(comboBoxEspecialidadMedicoModificar);
            listaEspecialidadMedicoModificar.setSelectedIndex(-1);

            conexionBD.close();
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }

    public void limpiarListaEspecialidadModificar() {
        DefaultComboBoxModel comboBoxVacio = new DefaultComboBoxModel();
        listaEspecialidadModificar.setModel(comboBoxVacio);
    }

    public void limpiarListaEnfermedadEspecialidadIngresar() {
        DefaultComboBoxModel comboBoxVacio = new DefaultComboBoxModel();
        listaEnfermedadEspecialidadIngresar.setModel(comboBoxVacio);
    }

    public void limpiarListaEnfermedadEspecialidadModificar() {
        DefaultComboBoxModel comboBoxVacio = new DefaultComboBoxModel();
        listaEnfermedadEspecialidadModificar.setModel(comboBoxVacio);
    }

    public void limpiarListaEspecialidadMedico() {
        DefaultComboBoxModel comboBoxVacio = new DefaultComboBoxModel();
        listaEspecialidadMedico.setModel(comboBoxVacio);
    }

    public void limpiarListaEspecialidadMedicoModificar() {
        DefaultComboBoxModel comboBoxVacio = new DefaultComboBoxModel();
        listaEspecialidadMedicoModificar.setModel(comboBoxVacio);
    }

    private void actualizarListaEnfermedadModificar() {
        Connection conexionBD = conector.crearConexion();
        String query = "select * From Enfermedades Order by Enfermedad;";
        ResultSet enfermedades = conector.ejecutarQuery(conexionBD, query);
        limpiarListaEnfermedadModificar();
        DefaultComboBoxModel comboBoxEnfermedad = (DefaultComboBoxModel) listaEnfermedadModificar.getModel();
        try {
            while (enfermedades.next()) {
                String Enfermedad = enfermedades.getString("Enfermedad");
                comboBoxEnfermedad.addElement(Enfermedad);
            }
            listaEnfermedadModificar.setModel(comboBoxEnfermedad);
            listaEnfermedadModificar.setSelectedIndex(-1);

            conexionBD.close();
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }

    public void limpiarListaEnfermedadModificar() {
        DefaultComboBoxModel comboBoxVacio = new DefaultComboBoxModel();
        listaEnfermedadModificar.setModel(comboBoxVacio);
    }

    private void actualizarListaEnfermedadAsignar() {
        Connection conexionBD = conector.crearConexion();
        //Traer lista de enfermedades y especialidades
        String textoQuerySelect = "Select * from Enfermedades;";
        //querySelect = String.format(textoQuerySelect, idEps);
        ResultSet enfermedades = conector.ejecutarQuery(conexionBD, textoQuerySelect);
        limpiarListaEnfermedadAsignar();
        limpiarListaEnfermedadAsignarModificar();
        DefaultComboBoxModel comboBoxEnfermedadAsignar = (DefaultComboBoxModel) listaEnfermedadAsignar.getModel();
        DefaultComboBoxModel comboBoxEnfermedadAsignarModificar = (DefaultComboBoxModel) listaEnfermedadAsignarModificar.getModel();
        try {
            while (enfermedades.next()) {
                String enfermedad = enfermedades.getString("Enfermedad");
                String idEspecialidad = enfermedades.getString("Id_Especialidad");
                //Buscar la especialidad por medio del IdEspecialidad
                textoQuerySelect = "Select * from Especialidades where Id = '%1$s';";
                String querySelect = String.format(textoQuerySelect, idEspecialidad);
                ResultSet resultados = conector.ejecutarQuery(conexionBD, querySelect);
                String especialidad = resultados.getString("Especialidad");
                String enfermedadEspecialidad = enfermedad + " - " + especialidad;
                comboBoxEnfermedadAsignar.addElement(enfermedadEspecialidad);
                comboBoxEnfermedadAsignarModificar.addElement(enfermedadEspecialidad);
            }
            listaEnfermedadAsignar.setModel(comboBoxEnfermedadAsignar);
            listaEnfermedadAsignar.setSelectedIndex(-1);
            listaEnfermedadAsignarModificar.setModel(comboBoxEnfermedadAsignarModificar);
            listaEnfermedadAsignarModificar.setSelectedIndex(-1);

            conexionBD.close();
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }

    public void limpiarListaEnfermedadAsignar() {
        DefaultComboBoxModel comboBoxVacio = new DefaultComboBoxModel();
        listaEnfermedadAsignar.setModel(comboBoxVacio);
    }

    public void limpiarListaEnfermedadAsignarModificar() {
        DefaultComboBoxModel comboBoxVacio = new DefaultComboBoxModel();
        listaEnfermedadAsignarModificar.setModel(comboBoxVacio);
    }

    public void limpiarListaMedicoAsignar() {
        DefaultComboBoxModel comboBoxVacio = new DefaultComboBoxModel();
        listaMedicoAsignar.setModel(comboBoxVacio);
    }

    public void limpiarListaMedicoAsignarModificar() {
        DefaultComboBoxModel comboBoxVacio = new DefaultComboBoxModel();
        listaMedicoAsignarModificar.setModel(comboBoxVacio);
    }

    public void limpiarListaAsignaciones() {
        DefaultComboBoxModel comboBoxVacio = new DefaultComboBoxModel();
        listaAsignaciones.setModel(comboBoxVacio);
    }

    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAsignar;
    private javax.swing.JButton btnAsignarEliminar;
    private javax.swing.JButton btnAsignarModificar;
    private javax.swing.JButton btnBuscarAsignar;
    private javax.swing.JButton btnBuscarAsignarModificar;
    private javax.swing.JButton btnBuscarEnfermedad;
    private javax.swing.JButton btnBuscarMedico;
    private javax.swing.JButton btnBuscarMedicoAsignar;
    private javax.swing.JButton btnBuscarMedicoAsignarModificar;
    private javax.swing.JButton btnBuscarPaciente;
    private javax.swing.JButton btnEditarCiudad;
    private javax.swing.JButton btnEditarEnfermedad;
    private javax.swing.JButton btnEditarEnfermedad1;
    private javax.swing.JButton btnEditarEps;
    private javax.swing.JButton btnEditarEspecialidad;
    private javax.swing.JButton btnEditarMedico;
    private javax.swing.JButton btnEliminarCiudad;
    private javax.swing.JButton btnEliminarEps;
    private javax.swing.JButton btnEliminarEspecialidad;
    private javax.swing.JButton btnEliminarMedico;
    private javax.swing.JButton btnEliminarPaciente;
    private javax.swing.JButton btnIngresarCiudad;
    private javax.swing.JButton btnIngresarEnfermedad;
    private javax.swing.JButton btnIngresarEps;
    private javax.swing.JButton btnIngresarEspecialidad;
    private javax.swing.JButton btnIngresarMedico;
    private javax.swing.JButton btnIngresarPaciente;
    private javax.swing.JButton btnLimpiarAsignar;
    private javax.swing.JButton btnLimpiarAsignarModificar;
    private javax.swing.JButton btnLimpiarEnfermedad;
    private javax.swing.JButton btnLimpiarMedico;
    private javax.swing.JButton btnLimpiarPaciente;
    private javax.swing.JButton btnModificarPaciente;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblBuscarMedico;
    private javax.swing.JLabel lblBuscarMedico1;
    private javax.swing.JLabel lblCedulaBuscarPaciente1;
    private javax.swing.JLabel lblCedulaBuscarPaciente2;
    private javax.swing.JLabel lblCedulaBuscarPaciente4;
    private javax.swing.JLabel lblCedulaBuscarPaciente5;
    private javax.swing.JLabel lblCedulaBuscarPaciente6;
    private javax.swing.JLabel lblCedulaMedico;
    private javax.swing.JLabel lblCedulaMedico1;
    private javax.swing.JLabel lblCedulaPaciente;
    private javax.swing.JLabel lblCedulaPaciente1;
    private javax.swing.JLabel lblCedulaPaciente2;
    private javax.swing.JLabel lblCedulaPaciente4;
    private javax.swing.JLabel lblCiudadIngresar;
    private javax.swing.JLabel lblCiudadIngresar1;
    private javax.swing.JLabel lblCiudadMedico;
    private javax.swing.JLabel lblCiudadMedico1;
    private javax.swing.JLabel lblCiudadPaciente;
    private javax.swing.JLabel lblCiudadPaciente1;
    private javax.swing.JLabel lblEdadPaciente;
    private javax.swing.JLabel lblEdadPaciente1;
    private javax.swing.JLabel lblEdadPaciente2;
    private javax.swing.JLabel lblEdadPaciente4;
    private javax.swing.JLabel lblEpsIngresar;
    private javax.swing.JLabel lblEpsIngresar1;
    private javax.swing.JLabel lblEpsMedico;
    private javax.swing.JLabel lblEpsMedico1;
    private javax.swing.JLabel lblEpsPaciente;
    private javax.swing.JLabel lblEpsPaciente1;
    private javax.swing.JLabel lblEs;
    private javax.swing.JLabel lblEs1;
    private javax.swing.JLabel lblEs2;
    private javax.swing.JLabel lblEs3;
    private javax.swing.JLabel lblEs4;
    private javax.swing.JLabel lblEspecialidadMedico;
    private javax.swing.JLabel lblEspecialidadMedico1;
    private javax.swing.JLabel lblIngresar;
    private javax.swing.JLabel lblIngresar1;
    private javax.swing.JLabel lblIngresar2;
    private javax.swing.JLabel lblIngresar3;
    private javax.swing.JLabel lblIngresar4;
    private javax.swing.JLabel lblIngresarMedico;
    private javax.swing.JLabel lblIngresarMedico1;
    private javax.swing.JLabel lblNombreMedico;
    private javax.swing.JLabel lblNombreMedico1;
    private javax.swing.JLabel lblNombrePaciente;
    private javax.swing.JLabel lblNombrePaciente1;
    private javax.swing.JLabel lblNombrePaciente2;
    private javax.swing.JLabel lblNombrePaciente3;
    private javax.swing.JLabel lblNombrePaciente4;
    private javax.swing.JLabel lblNombrePaciente5;
    private javax.swing.JLabel lblNombrePaciente6;
    private javax.swing.JLabel lblNombrePaciente7;
    private javax.swing.JComboBox<String> listaAsignaciones;
    private javax.swing.JComboBox<String> listaCiudadMedico;
    private javax.swing.JComboBox<String> listaCiudadMedicoModificar;
    private javax.swing.JComboBox<String> listaCiudadModificar;
    private javax.swing.JComboBox<String> listaCiudadPaciente;
    private javax.swing.JComboBox<String> listaCiudadPacienteModificar;
    private javax.swing.JComboBox<String> listaEnfermedadAsignar;
    private javax.swing.JComboBox<String> listaEnfermedadAsignarModificar;
    private javax.swing.JComboBox<String> listaEnfermedadEspecialidadIngresar;
    private javax.swing.JComboBox<String> listaEnfermedadEspecialidadModificar;
    private javax.swing.JComboBox<String> listaEnfermedadModificar;
    private javax.swing.JComboBox<String> listaEpsMedico;
    private javax.swing.JComboBox<String> listaEpsMedicoModificar;
    private javax.swing.JComboBox<String> listaEpsModificar;
    private javax.swing.JComboBox<String> listaEpsPaciente;
    private javax.swing.JComboBox<String> listaEpsPacienteModificar;
    private javax.swing.JComboBox<String> listaEspecialidadMedico;
    private javax.swing.JComboBox<String> listaEspecialidadMedicoModificar;
    private javax.swing.JComboBox<String> listaEspecialidadModificar;
    private javax.swing.JComboBox<String> listaMedicoAsignar;
    private javax.swing.JComboBox<String> listaMedicoAsignarModificar;
    private javax.swing.JTextField txtCedulaAsignar;
    private javax.swing.JTextField txtCedulaAsignarModificar;
    private javax.swing.JTextField txtCedulaBuscarMedico;
    private javax.swing.JTextField txtCedulaBuscarPaciente;
    private javax.swing.JTextField txtCedulaMedico;
    private javax.swing.JTextField txtCedulaMedicoModificar;
    private javax.swing.JTextField txtCedulaPaciente;
    private javax.swing.JTextField txtCedulaPacienteModificar;
    private javax.swing.JTextField txtCiudadAsignar;
    private javax.swing.JTextField txtCiudadAsignarModificar;
    private javax.swing.JTextField txtCiudadIngresar;
    private javax.swing.JTextField txtCiudadModificar;
    private javax.swing.JTextField txtEdadPaciente;
    private javax.swing.JTextField txtEdadPacienteModificar;
    private javax.swing.JTextField txtEnfermedadIngresar;
    private javax.swing.JTextField txtEnfermedadModificar;
    private javax.swing.JTextField txtEpsAsignar;
    private javax.swing.JTextField txtEpsAsignarModificar;
    private javax.swing.JTextField txtEpsIngresar;
    private javax.swing.JTextField txtEpsModificar;
    private javax.swing.JTextField txtEspecialidadIngresar;
    private javax.swing.JTextField txtEspecialidadModificar;
    private javax.swing.JTextField txtNombreAsignar;
    private javax.swing.JTextField txtNombreAsignarModificar;
    private javax.swing.JTextField txtNombreMedico;
    private javax.swing.JTextField txtNombreMedicoModificar;
    private javax.swing.JTextField txtNombrePaciente;
    private javax.swing.JTextField txtNombrePacienteModificar;
    // End of variables declaration//GEN-END:variables
}
