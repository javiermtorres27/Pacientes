/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Registro_Pacientes_Doctores;

import java.sql.Connection;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

public class Main extends javax.swing.JFrame {

    /*
    static Paciente[] pacientes = new Paciente[1000];
    static Medico[] medicos = new Medico[1000];
    static int cedulaBuscada = -1;
    static int cedulaBuscadaMedico = -1;
     */
    Conector conector;

    public Main() {

        initComponents();
        //getContentPane().setBackground(new java.awt.Color(204, 204, 255));
        /*
        limpiarLista();
        limpiarListaMedicos();
        limpiarListaPacientesSinMedico();
        limpiarListaPacientesConMedico();
         */
 /*
        txtNombreMedicoAsignar.setEditable(false);
        txtEpsMedicoAsignar.setEditable(false);
        txtlistaEspecialidadAsignar.setEditable(false);
         */
        conector = new Conector();
        limpiarListaCiudadModificar();
        limpiarListaEpsModificar();
        limpiarListaEspecialidadModificar();
        limpiarListaEnfermedadEspecialidadIngresar();
        limpiarListaEnfermedadModificar();
        actualizarListaCiudadModificar();
        actualizarListaEpsModificar();
        actualizarListaEspecialidadModificar();
        actualizarListaEnfermedadModificar();


        /*
        Connection conexionBD = conector.crearConexion();
        if (conexionBD == null) {
            JOptionPane.showConfirmDialog(this, "No se pudo crear la conexion");
        } else {
            String textoQuery = "select count (*) as CUENTA from Pacientes;";
            Integer cantidadRegistros;
            try {
                cantidadRegistros = (conector.ejecutarQuery(conexionBD, textoQuery)).getInt("CUENTA");
                for (int i = 0; i < cantidadRegistros; i++) {
                    JOptionPane.showMessageDialog(rootPane, "la cantidad de registros son: " + cantidadRegistros);
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(rootPane, "Existe un pequeño error en la conexión con la Base de Datos");
            }
        }
         */
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        lblCedulaPaciente = new javax.swing.JLabel();
        txtCedulaPaciente = new javax.swing.JTextField();
        lblEdadPaciente = new javax.swing.JLabel();
        txtEdadPaciente = new javax.swing.JTextField();
        lblCiudadPaciente = new javax.swing.JLabel();
        lblEpsPaciente = new javax.swing.JLabel();
        lblNombrePaciente = new javax.swing.JLabel();
        txtNombrePaciente = new javax.swing.JTextField();
        botonIngresarPaciente = new javax.swing.JButton();
        lblIngresar = new javax.swing.JLabel();
        listaEpsPaciente = new javax.swing.JComboBox<>();
        listaCiudadPaciente = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        botonProcesar = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        listaSalidas = new javax.swing.JList<>();
        jScrollPane4 = new javax.swing.JScrollPane();
        listaDatos = new javax.swing.JList<>();
        botonObtener = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        lblNombreEditarPaciente = new javax.swing.JLabel();
        txtNombreEditarPaciente = new javax.swing.JTextField();
        txtCedulaEditarPaciente = new javax.swing.JTextField();
        lblCedulaEditarPaciente = new javax.swing.JLabel();
        lblEdadEditarPaciente = new javax.swing.JLabel();
        txtEdadEditarPaciente = new javax.swing.JTextField();
        lblEpsEditarPaciente = new javax.swing.JLabel();
        lblCiudadEditarPaciente = new javax.swing.JLabel();
        botonEditarPaciente = new javax.swing.JButton();
        botonEliminarPaciente = new javax.swing.JButton();
        lblBusqueda = new javax.swing.JLabel();
        lblCedulaBuscarPaciente = new javax.swing.JLabel();
        txtCedulaBuscarPaciente = new javax.swing.JTextField();
        botonBuscarPaciente = new javax.swing.JButton();
        botonLimpiarEditarPaciente = new javax.swing.JButton();
        listaCiudadEditarPaciente = new javax.swing.JComboBox<>();
        listaEpsEditarPaciente = new javax.swing.JComboBox<>();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        listaPacientesConMedico = new javax.swing.JList<>();
        botonPacientesSinAsignacion = new javax.swing.JButton();
        lblBuscarMedico = new javax.swing.JLabel();
        lblCedulaMedicoBuscar = new javax.swing.JLabel();
        txtCedulaBuscarMedico = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        listaPacientesSinMedico = new javax.swing.JList<>();
        lblNombreMedicoAsignar = new javax.swing.JLabel();
        txtNombreMedicoAsignar = new javax.swing.JTextField();
        txtEpsMedicoAsignar = new javax.swing.JTextField();
        lblEpsMedicoAsignar = new javax.swing.JLabel();
        lblEspecialidadAsignar = new javax.swing.JLabel();
        botonBuscarMedico = new javax.swing.JButton();
        botonLimpiarAsignar = new javax.swing.JButton();
        txtlistaEspecialidadAsignar = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        lblIngresarMedico = new javax.swing.JLabel();
        lblNombreMedico = new javax.swing.JLabel();
        txtNombreMedico = new javax.swing.JTextField();
        lblCedulaMedico = new javax.swing.JLabel();
        txtCedulaMedico = new javax.swing.JTextField();
        lblEpsMedico = new javax.swing.JLabel();
        botonIngresarMedico = new javax.swing.JButton();
        lblEspecialidad = new javax.swing.JLabel();
        listaEspecialidad = new javax.swing.JComboBox<>();
        listaEpsMedico = new javax.swing.JComboBox<>();
        listaCiudadMedico = new javax.swing.JComboBox<>();
        lblCiudadMedico = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        txtCiudadIngresar = new javax.swing.JTextField();
        lblCiudadIngresar = new javax.swing.JLabel();
        lblEpsIngresar = new javax.swing.JLabel();
        txtEpsIngresar = new javax.swing.JTextField();
        lblEs = new javax.swing.JLabel();
        txtEspecialidadIngresar = new javax.swing.JTextField();
        lblIngresar1 = new javax.swing.JLabel();
        btnIngresarCiudad = new javax.swing.JButton();
        btnIngresarEps = new javax.swing.JButton();
        btnIngresarEspecialidad = new javax.swing.JButton();
        lblIngresar2 = new javax.swing.JLabel();
        lblCiudadIngresar1 = new javax.swing.JLabel();
        txtCiudadModificar = new javax.swing.JTextField();
        btnEditarCiudad = new javax.swing.JButton();
        lblEpsIngresar1 = new javax.swing.JLabel();
        txtEpsModificar = new javax.swing.JTextField();
        btnEditarEps = new javax.swing.JButton();
        lblEs1 = new javax.swing.JLabel();
        txtEspecialidadModificar = new javax.swing.JTextField();
        btnEditarEspecialidad = new javax.swing.JButton();
        listaCiudadModificar = new javax.swing.JComboBox<>();
        listaEpsModificar = new javax.swing.JComboBox<>();
        listaEspecialidadModificar = new javax.swing.JComboBox<>();
        lblIngresar3 = new javax.swing.JLabel();
        lblEs2 = new javax.swing.JLabel();
        listaEnfermedadEspecialidadIngresar = new javax.swing.JComboBox<>();
        txtEnfermedadIngresar = new javax.swing.JTextField();
        btnIngresarEnfermedad = new javax.swing.JButton();
        btnEditarEnfermedad = new javax.swing.JButton();
        listaEnfermedadEspecialidadModificar = new javax.swing.JComboBox<>();
        lblEs3 = new javax.swing.JLabel();
        txtEnfermedadModificar = new javax.swing.JTextField();
        listaEnfermedadModificar = new javax.swing.JComboBox<>();
        lblEs4 = new javax.swing.JLabel();
        btnEliminarCiudad = new javax.swing.JButton();
        btnEliminarEps = new javax.swing.JButton();
        btnEliminarEspecialidad = new javax.swing.JButton();
        btnBuscarEnfermedad = new javax.swing.JButton();
        btnBuscarEnfermedad1 = new javax.swing.JButton();
        btnEditarEnfermedad1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Formulario General");
        setBackground(new java.awt.Color(204, 204, 255));
        setResizable(false);

        lblCedulaPaciente.setText("Cédula");

        lblEdadPaciente.setText("Edad");

        lblCiudadPaciente.setText("Ciudad");

        lblEpsPaciente.setText("EPS");

        lblNombrePaciente.setText("Nombre");

        botonIngresarPaciente.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        botonIngresarPaciente.setText("Ingresar Paciente");
        botonIngresarPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonIngresarPacienteActionPerformed(evt);
            }
        });

        lblIngresar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblIngresar.setText("Ingresar datos de paciente");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblIngresar, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtNombrePaciente)
                                    .addComponent(lblNombrePaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(txtCedulaPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtEdadPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(lblCedulaPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(lblEdadPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(listaCiudadPaciente, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblCiudadPaciente, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(listaEpsPaciente, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblEpsPaciente, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(179, 179, 179)
                        .addComponent(botonIngresarPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(135, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(lblIngresar)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNombrePaciente)
                    .addComponent(lblCedulaPaciente)
                    .addComponent(lblEdadPaciente))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNombrePaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCedulaPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtEdadPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCiudadPaciente)
                    .addComponent(lblEpsPaciente))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 148, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(listaEpsPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(listaCiudadPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addComponent(botonIngresarPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(147, 147, 147))
        );

        jTabbedPane1.addTab("Ingresar Paciente", jPanel1);

        botonProcesar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        botonProcesar.setText("Procesar datos");
        botonProcesar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonProcesarActionPerformed(evt);
            }
        });

        jScrollPane3.setViewportView(listaSalidas);

        jScrollPane4.setViewportView(listaDatos);
        listaDatos.getAccessibleContext().setAccessibleName("");

        botonObtener.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        botonObtener.setText("Obtener datos");
        botonObtener.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonObtenerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonObtener, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonProcesar, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonProcesar)
                    .addComponent(botonObtener))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                    .addComponent(jScrollPane3))
                .addContainerGap(173, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Procesar datos", jPanel2);

        lblNombreEditarPaciente.setText("Nombre");

        lblCedulaEditarPaciente.setText("Cédula");

        lblEdadEditarPaciente.setText("Edad");

        lblEpsEditarPaciente.setText("EPS");

        lblCiudadEditarPaciente.setText("Ciudad");

        botonEditarPaciente.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        botonEditarPaciente.setText("Editar");
        botonEditarPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEditarPacienteActionPerformed(evt);
            }
        });

        botonEliminarPaciente.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        botonEliminarPaciente.setText("Eliminar");
        botonEliminarPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEliminarPacienteActionPerformed(evt);
            }
        });

        lblBusqueda.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblBusqueda.setText("Resultados de la búsqueda");

        lblCedulaBuscarPaciente.setText("Cédula Paciente");

        botonBuscarPaciente.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        botonBuscarPaciente.setText("Buscar");
        botonBuscarPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonBuscarPacienteActionPerformed(evt);
            }
        });

        botonLimpiarEditarPaciente.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        botonLimpiarEditarPaciente.setText("Limpiar");
        botonLimpiarEditarPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonLimpiarEditarPacienteActionPerformed(evt);
            }
        });

        listaCiudadEditarPaciente.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "cancer", "cardiovasculares", "respiratorias", "cerebrovasculares", "hipertension", "diabetes" }));
        listaCiudadEditarPaciente.setSelectedIndex(-1);

        listaEpsEditarPaciente.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "cancer", "cardiovasculares", "respiratorias", "cerebrovasculares", "hipertension", "diabetes" }));
        listaEpsEditarPaciente.setSelectedIndex(-1);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(lblCedulaBuscarPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCedulaBuscarPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botonBuscarPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(botonEditarPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addComponent(botonEliminarPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addComponent(botonLimpiarEditarPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtNombreEditarPaciente)
                            .addComponent(lblNombreEditarPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(txtCedulaEditarPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(txtEdadEditarPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(lblCedulaEditarPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lblEdadEditarPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(lblBusqueda, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addComponent(listaCiudadEditarPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(listaEpsEditarPaciente, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                            .addComponent(lblCiudadEditarPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(lblEpsEditarPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(135, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCedulaBuscarPaciente)
                    .addComponent(txtCedulaBuscarPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonBuscarPaciente))
                .addGap(18, 18, 18)
                .addComponent(lblBusqueda)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNombreEditarPaciente)
                    .addComponent(lblCedulaEditarPaciente)
                    .addComponent(lblEdadEditarPaciente))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNombreEditarPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCedulaEditarPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtEdadEditarPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCiudadEditarPaciente)
                    .addComponent(lblEpsEditarPaciente))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(listaEpsEditarPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(listaCiudadEditarPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 166, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonEditarPaciente)
                    .addComponent(botonEliminarPaciente)
                    .addComponent(botonLimpiarEditarPaciente))
                .addGap(149, 149, 149))
        );

        jTabbedPane1.addTab("Editar / Eliminar", jPanel3);

        jScrollPane6.setViewportView(listaPacientesConMedico);

        botonPacientesSinAsignacion.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        botonPacientesSinAsignacion.setText("Obtener Pacientes Sin Asignación");
        botonPacientesSinAsignacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonPacientesSinAsignacionActionPerformed(evt);
            }
        });

        lblBuscarMedico.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblBuscarMedico.setText("Pacientes asignados");

        lblCedulaMedicoBuscar.setText("Cédula Médico");

        jLabel3.setText("Primero busque el médico, genere pacientes sin asignación y asigne uno por uno.");

        jScrollPane7.setViewportView(listaPacientesSinMedico);

        lblNombreMedicoAsignar.setText("Nombre Médico");

        lblEpsMedicoAsignar.setText("Eps Vinculada");

        lblEspecialidadAsignar.setText("Especialidad");

        botonBuscarMedico.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        botonBuscarMedico.setText("Buscar");
        botonBuscarMedico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonBuscarMedicoActionPerformed(evt);
            }
        });

        botonLimpiarAsignar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        botonLimpiarAsignar.setText("Limpiar");
        botonLimpiarAsignar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonLimpiarAsignarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(lblBuscarMedico, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(37, 37, 37)
                                .addComponent(jLabel3))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblNombreMedicoAsignar, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtNombreMedicoAsignar, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblEpsMedicoAsignar, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtEpsMedicoAsignar, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblEspecialidadAsignar, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtlistaEspecialidadAsignar, javax.swing.GroupLayout.DEFAULT_SIZE, 281, Short.MAX_VALUE)))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(lblCedulaMedicoBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(txtCedulaBuscarMedico, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(31, 31, 31)
                                .addComponent(botonBuscarMedico, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(botonLimpiarAsignar, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel5Layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(botonPacientesSinAsignacion, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE)))
                                .addGap(72, 72, 72)))))
                .addGap(16, 16, 16))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblBuscarMedico)
                    .addComponent(jLabel3))
                .addGap(19, 19, 19)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblCedulaMedicoBuscar)
                        .addComponent(txtCedulaBuscarMedico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(botonBuscarMedico)
                        .addComponent(botonLimpiarAsignar)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                            .addComponent(lblNombreMedicoAsignar)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtNombreMedicoAsignar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                            .addComponent(lblEpsMedicoAsignar)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtEpsMedicoAsignar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtlistaEspecialidadAsignar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(lblEspecialidadAsignar))
                .addGap(18, 18, 18)
                .addComponent(botonPacientesSinAsignacion)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane7)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15))
        );

        jTabbedPane1.addTab("Atención Médica", jPanel5);

        lblIngresarMedico.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblIngresarMedico.setText("Ingresar datos de médico");

        lblNombreMedico.setText("Nombre");

        lblCedulaMedico.setText("Cédula");

        txtCedulaMedico.setMaximumSize(new java.awt.Dimension(158, 2147483647));

        lblEpsMedico.setText("Eps Vinculada");

        botonIngresarMedico.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        botonIngresarMedico.setText("Ingresar Médico");
        botonIngresarMedico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonIngresarMedicoActionPerformed(evt);
            }
        });

        lblEspecialidad.setText("Especialidad");

        listaEspecialidad.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Oncologo-cancer", "Cardiologo-cardiovasculares", "Neumologo-respiratorias", "Neurologo-cerebrovasculares", "Internista-hipertension", "Endocrinologo-diabetes" }));
        listaEspecialidad.setSelectedIndex(-1);

        listaEpsMedico.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Oncologo-cancer", "Cardiologo-cardiovasculares", "Neumologo-respiratorias", "Neurologo-cerebrovasculares", "Internista-hipertension", "Endocrinologo-diabetes" }));
        listaEpsMedico.setSelectedIndex(-1);

        listaCiudadMedico.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Oncologo-cancer", "Cardiologo-cardiovasculares", "Neumologo-respiratorias", "Neurologo-cerebrovasculares", "Internista-hipertension", "Endocrinologo-diabetes" }));
        listaCiudadMedico.setSelectedIndex(-1);

        lblCiudadMedico.setText("Ciudad");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lblEpsMedico, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(listaEpsMedico, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(listaEspecialidad, javax.swing.GroupLayout.Alignment.LEADING, 0, 1, Short.MAX_VALUE)
                                    .addComponent(lblEspecialidad, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lblNombreMedico, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
                                    .addComponent(txtNombreMedico))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtCedulaMedico, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addComponent(lblCedulaMedico, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE)))))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(listaCiudadMedico, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblCiudadMedico, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(131, 131, 131))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(lblIngresarMedico, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(196, 196, 196)
                .addComponent(botonIngresarMedico, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(lblIngresarMedico)
                        .addGap(22, 22, 22)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblNombreMedico)
                            .addComponent(lblCedulaMedico))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNombreMedico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(lblCiudadMedico)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtCedulaMedico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(listaCiudadMedico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEspecialidad)
                    .addComponent(lblEpsMedico))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(listaEspecialidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(listaEpsMedico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addComponent(botonIngresarMedico, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(287, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Ingresar Médico", jPanel4);

        lblCiudadIngresar.setText("Ciudad");

        lblEpsIngresar.setText("EPS");

        lblEs.setText("Especialidad");

        lblIngresar1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblIngresar1.setText("Ingresar Ciudad, Eps, Especialidad");

        btnIngresarCiudad.setText("Ingresar Ciudad");
        btnIngresarCiudad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIngresarCiudadActionPerformed(evt);
            }
        });

        btnIngresarEps.setText("Ingresar EPS");
        btnIngresarEps.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIngresarEpsActionPerformed(evt);
            }
        });

        btnIngresarEspecialidad.setText("Ingresar Especialidad");
        btnIngresarEspecialidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIngresarEspecialidadActionPerformed(evt);
            }
        });

        lblIngresar2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblIngresar2.setText("Editar/Eliminar Ciudad, Eps, Especialidad");

        lblCiudadIngresar1.setText("Ciudad");

        btnEditarCiudad.setText("Editar Ciudad");
        btnEditarCiudad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarCiudadActionPerformed(evt);
            }
        });

        lblEpsIngresar1.setText("EPS");

        btnEditarEps.setText("Editar Eps");
        btnEditarEps.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarEpsActionPerformed(evt);
            }
        });

        lblEs1.setText("Especialidad");

        btnEditarEspecialidad.setText("Editar Especialidad");
        btnEditarEspecialidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarEspecialidadActionPerformed(evt);
            }
        });

        lblIngresar3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblIngresar3.setText("Enfermedad relacionada a una Especialidad");

        lblEs2.setText("Seleccione Especialidad");

        btnIngresarEnfermedad.setText("Ingresar Enfermedad");
        btnIngresarEnfermedad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIngresarEnfermedadActionPerformed(evt);
            }
        });

        btnEditarEnfermedad.setText("Editar Enfermedad");
        btnEditarEnfermedad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarEnfermedadActionPerformed(evt);
            }
        });

        lblEs3.setText("Seleccione Especialidad");

        lblEs4.setText("<html>Seleccione Enfermedad a Modificar<html>");

        btnEliminarCiudad.setText("Eliminar Ciudad");
        btnEliminarCiudad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarCiudadActionPerformed(evt);
            }
        });

        btnEliminarEps.setText("Eliminar Eps");
        btnEliminarEps.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarEpsActionPerformed(evt);
            }
        });

        btnEliminarEspecialidad.setText("Eliminar Especialidad");
        btnEliminarEspecialidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarEspecialidadActionPerformed(evt);
            }
        });

        btnBuscarEnfermedad.setText("Buscar Enfermedad");
        btnBuscarEnfermedad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarEnfermedadActionPerformed(evt);
            }
        });

        btnBuscarEnfermedad1.setText("Limpiar");
        btnBuscarEnfermedad1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarEnfermedad1ActionPerformed(evt);
            }
        });

        btnEditarEnfermedad1.setText("Eliminar Enfermedad");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel6Layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel6Layout.createSequentialGroup()
                                        .addComponent(lblCiudadIngresar1, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 9, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(btnEditarCiudad, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(txtCiudadModificar)
                                            .addComponent(btnEliminarCiudad, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE))
                                        .addGap(9, 9, 9)))
                                .addGap(0, 9, Short.MAX_VALUE)
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(btnEditarEps, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtEpsModificar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtEspecialidadModificar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(btnEditarEspecialidad, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                                        .addComponent(lblEpsIngresar1, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(lblEs1, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel6Layout.createSequentialGroup()
                                        .addComponent(btnEliminarEps, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnEliminarEspecialidad, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(listaCiudadModificar, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(listaEpsModificar, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(listaEspecialidadModificar, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblIngresar3, javax.swing.GroupLayout.PREFERRED_SIZE, 518, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblIngresar2, javax.swing.GroupLayout.PREFERRED_SIZE, 518, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblIngresar1, javax.swing.GroupLayout.PREFERRED_SIZE, 518, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(btnIngresarCiudad, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblCiudadIngresar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
                                    .addComponent(txtCiudadIngresar, javax.swing.GroupLayout.Alignment.LEADING))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel6Layout.createSequentialGroup()
                                        .addComponent(lblEpsIngresar, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(lblEs, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel6Layout.createSequentialGroup()
                                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(btnIngresarEps, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(txtEpsIngresar, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE))
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txtEspecialidadIngresar, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
                                            .addComponent(btnIngresarEspecialidad, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))))
                .addGap(130, 130, 130))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(listaEnfermedadEspecialidadIngresar, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEs2, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtEnfermedadIngresar, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnIngresarEnfermedad, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(btnBuscarEnfermedad1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnEditarEnfermedad1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel6Layout.createSequentialGroup()
                            .addComponent(lblEs4, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(txtEnfermedadModificar, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel6Layout.createSequentialGroup()
                            .addComponent(btnBuscarEnfermedad, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(btnEditarEnfermedad, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel6Layout.createSequentialGroup()
                            .addComponent(listaEnfermedadModificar, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(listaEnfermedadEspecialidadModificar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblEs3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(lblIngresar1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCiudadIngresar)
                    .addComponent(lblEpsIngresar)
                    .addComponent(lblEs))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCiudadIngresar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtEpsIngresar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtEspecialidadIngresar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnIngresarCiudad)
                    .addComponent(btnIngresarEps)
                    .addComponent(btnIngresarEspecialidad))
                .addGap(27, 27, 27)
                .addComponent(lblIngresar2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCiudadIngresar1)
                    .addComponent(lblEpsIngresar1)
                    .addComponent(lblEs1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(listaEpsModificar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(listaEspecialidadModificar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(listaCiudadModificar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCiudadModificar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtEpsModificar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtEspecialidadModificar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEditarCiudad)
                    .addComponent(btnEditarEps)
                    .addComponent(btnEditarEspecialidad))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEliminarCiudad)
                    .addComponent(btnEliminarEps)
                    .addComponent(btnEliminarEspecialidad))
                .addGap(18, 18, 18)
                .addComponent(lblIngresar3)
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(txtEnfermedadIngresar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblEs2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(listaEnfermedadEspecialidadIngresar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(btnIngresarEnfermedad))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(txtEnfermedadModificar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblEs3))
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(lblEs4, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(listaEnfermedadEspecialidadModificar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(listaEnfermedadModificar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnEditarEnfermedad)
                            .addComponent(btnBuscarEnfermedad))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBuscarEnfermedad1)
                    .addComponent(btnEditarEnfermedad1))
                .addContainerGap(9, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Ingresar Otros", jPanel6);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void actualizarListaCiudadModificar() {
        Connection conexionBD = conector.crearConexion();
        String query = "select Id, Ciudad From Ciudades Order by Ciudad;";
        ResultSet ciudades = conector.ejecutarQuery(conexionBD, query);
        limpiarListaCiudadModificar();
        DefaultComboBoxModel comboBoxCiudades = (DefaultComboBoxModel) listaCiudadModificar.getModel();
        try {
            while (ciudades.next()) {
                //String id = ciudades.getString("Id");
                String ciudad = ciudades.getString("Ciudad");
                comboBoxCiudades.addElement(ciudad);
            }
            listaCiudadModificar.setModel(comboBoxCiudades);
            listaCiudadModificar.setSelectedIndex(-1);
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }

    public void limpiarListaCiudadModificar() {
        DefaultComboBoxModel comboBoxVacio = new DefaultComboBoxModel();
        listaCiudadModificar.setModel(comboBoxVacio);
    }

    private void actualizarListaEpsModificar() {
        Connection conexionBD = conector.crearConexion();
        String query = "select Id, EPS From EPS Order by EPS;";
        ResultSet eps = conector.ejecutarQuery(conexionBD, query);
        limpiarListaEpsModificar();
        DefaultComboBoxModel comboBoxEps = (DefaultComboBoxModel) listaEpsModificar.getModel();
        try {
            while (eps.next()) {
                //String id = ciudades.getString("Id");
                String EPS = eps.getString("EPS");
                comboBoxEps.addElement(EPS);
            }
            listaEpsModificar.setModel(comboBoxEps);
            listaEpsModificar.setSelectedIndex(-1);
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }

    public void limpiarListaEpsModificar() {
        DefaultComboBoxModel comboBoxVacio = new DefaultComboBoxModel();
        listaEpsModificar.setModel(comboBoxVacio);
    }

    private void actualizarListaEspecialidadModificar() {
        Connection conexionBD = conector.crearConexion();
        String query = "select Id, Especialidad From Especialidades Order by Especialidad;";
        ResultSet especialidades = conector.ejecutarQuery(conexionBD, query);
        limpiarListaEspecialidadModificar();
        limpiarListaEnfermedadEspecialidadIngresar();
        limpiarListaEnfermedadEspecialidadModificar();

        DefaultComboBoxModel comboBoxEspecialidad = (DefaultComboBoxModel) listaEspecialidadModificar.getModel();
        DefaultComboBoxModel comboBoxEspecialidad2 = (DefaultComboBoxModel) listaEnfermedadEspecialidadIngresar.getModel();
        DefaultComboBoxModel comboBoxEspecialidad3 = (DefaultComboBoxModel) listaEnfermedadEspecialidadModificar.getModel();
        try {
            while (especialidades.next()) {
                //String id = ciudades.getString("Id");
                String Especialidad = especialidades.getString("Especialidad");
                comboBoxEspecialidad.addElement(Especialidad);
                comboBoxEspecialidad2.addElement(Especialidad);
                comboBoxEspecialidad3.addElement(Especialidad);
            }
            listaEspecialidadModificar.setModel(comboBoxEspecialidad);
            listaEspecialidadModificar.setSelectedIndex(-1);
            listaEnfermedadEspecialidadIngresar.setModel(comboBoxEspecialidad2);
            listaEnfermedadEspecialidadIngresar.setSelectedIndex(-1);
            listaEnfermedadEspecialidadModificar.setModel(comboBoxEspecialidad3);
            listaEnfermedadEspecialidadModificar.setSelectedIndex(-1);
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }

    public void limpiarListaEspecialidadModificar() {
        DefaultComboBoxModel comboBoxVacio = new DefaultComboBoxModel();
        listaEspecialidadModificar.setModel(comboBoxVacio);
    }

    public void limpiarListaEnfermedadEspecialidadIngresar() {
        DefaultComboBoxModel comboBoxVacio = new DefaultComboBoxModel();
        listaEnfermedadEspecialidadIngresar.setModel(comboBoxVacio);
    }

    public void limpiarListaEnfermedadEspecialidadModificar() {
        DefaultComboBoxModel comboBoxVacio = new DefaultComboBoxModel();
        listaEnfermedadEspecialidadModificar.setModel(comboBoxVacio);
    }

    private void actualizarListaEnfermedadModificar() {
        Connection conexionBD = conector.crearConexion();
        String query = "select * From Enfermedades Order by Enfermedad;";
        ResultSet enfermedades = conector.ejecutarQuery(conexionBD, query);
        limpiarListaEnfermedadModificar();
        DefaultComboBoxModel comboBoxEnfermedad = (DefaultComboBoxModel) listaEnfermedadModificar.getModel();
        try {
            while (enfermedades.next()) {
                String Enfermedad = enfermedades.getString("Enfermedad");
                comboBoxEnfermedad.addElement(Enfermedad);
            }
            listaEnfermedadModificar.setModel(comboBoxEnfermedad);
            listaEnfermedadModificar.setSelectedIndex(-1);
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }

    public void limpiarListaEnfermedadModificar() {
        DefaultComboBoxModel comboBoxVacio = new DefaultComboBoxModel();
        listaEnfermedadModificar.setModel(comboBoxVacio);
    }


    private void botonIngresarMedicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonIngresarMedicoActionPerformed
        try {
            String nombre = txtNombreMedico.getText().trim();
            String cedula = txtCedulaMedico.getText().trim();
            String ciudad = listaCiudadMedico.getSelectedItem().toString();
            String eps = listaEpsMedico.getSelectedItem().toString();
            String especialidad = listaEspecialidad.getSelectedItem().toString();
            //Se verifica que ningun campo esté vacío
            if (!nombre.isBlank() && !cedula.isBlank() && listaCiudadMedico.getSelectedIndex() != -1 && listaEpsMedico.getSelectedIndex() != -1 && listaEspecialidad.getSelectedIndex() != -1) {
                //limpiarListaMedicos();
                //Se llama al método agregarMedico el cual permite agregar a la lista de Medicos
                agregarMedico(nombre, cedula, ciudad, eps, especialidad);
            } else {
                JOptionPane.showMessageDialog(this, String.format("Asegúrese de escribir y/o seleccionar todos los campos"));
            }

        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar especialidad");
        }
    }//GEN-LAST:event_botonIngresarMedicoActionPerformed

    private void botonLimpiarAsignarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonLimpiarAsignarActionPerformed
        /*
        limpiarAsignar();
        limpiarListaPacientesSinMedico();
        limpiarListaPacientesConMedico();
         */
    }//GEN-LAST:event_botonLimpiarAsignarActionPerformed

    /**
     * Actualiza la listaPacientesSinMedico para mostrar sólo los pacientes a
     * los que no se les ha asignado médico
     */
    /*
    private void pacientesSinAsignacion(){
        limpiarListaPacientesSinMedico();
        DefaultListModel modeloPacientesSinMedico = (DefaultListModel)listaPacientesSinMedico.getModel();
        String eps = this.txtEpsMedicoAsignar.getText();
        String especialidad = this.txtlistaEspecialidadAsignar.getText();
        
        //Buscar todos los pacientes que se pueden asignar al médico buscado
        //Tiene que coincidir la EPS, la especialidad y que al paciente aún no se le haya asignado médico
        for (int i = 0; i < Paciente.getContadorPacientes(); i++) {
            if(pacientes[i].getEps().equalsIgnoreCase(eps) && especialidad.contains(pacientes[i].getEnfermedad()) && pacientes[i].getMedicoAsignado()==-1){
                String linea = pacientes[i].mostrar();
                modeloPacientesSinMedico.addElement(linea);
            }
        }
    }*/

    private void botonBuscarMedicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonBuscarMedicoActionPerformed
        /*
        if(txtCedulaBuscarMedico.getText().trim().isBlank()){
            JOptionPane.showMessageDialog(this, "Escriba una cédula a buscar");
        }else{
            txtCedulaBuscarMedico.setEditable(false);
            //Se crea el vector especialidades
            String[] especialidades = new String[]{"Oncologo-cancer","Cardiologo-cardiovasculares","Neumologo-respiratorias","Neurologo-cerebrovasculares","Internista-hipertension","Encologo-diabetes"};
            String cedulaBuscarMedico = this.txtCedulaBuscarMedico.getText().trim();
            if(cedulaBuscarMedico.isBlank()){
                JOptionPane.showMessageDialog(this, "Escriba una cédula para buscar sus datos");
            }else{
                //Se busca que la cedula digitada coincida con alguna en el registro(vector) medicos
                for (int i = 0; i < Medico.getContadorMedicos(); i++) {
                    if (medicos[i].getCedula().equalsIgnoreCase(cedulaBuscarMedico)) {
                        //Se guarda la posicion que ocupa el medico en el vector medicos
                        cedulaBuscadaMedico = i;
                        //Se asignan los valores encontrados del medico buscado en los campos especificos
                        txtNombreMedicoAsignar.setText(medicos[i].getNombre());
                        txtEpsMedicoAsignar.setText(medicos[i].getEps());
                        txtlistaEspecialidadAsignar.setText(medicos[i].getEspecialidad());
                    }
                }
                //Se guarda la posicion del Medico en el vector medicos
                int posicionMedico = -1;
                for (int i = 0; i < Medico.getContadorMedicos(); i++) {
                    if (medicos[i].getCedula().equalsIgnoreCase(cedulaBuscarMedico)) {
                        posicionMedico = i;
                    }
                }
                //Se buscan todos los pacientes a los que ya se les ha asignado el médico buscado
                //Estos pacientes se van agregando uno a uno a la listaPacientesConMedico
                DefaultListModel modeloPacientesConMedico = (DefaultListModel)listaPacientesConMedico.getModel();
                for (int j = 0; j < Paciente.getContadorPacientes(); j++) {
                    if(pacientes[j].getMedicoAsignado()==posicionMedico){
                        String linea = pacientes[j].mostrar();
                        modeloPacientesConMedico.addElement(linea);
                    }
                }
            }
        }
         */
    }//GEN-LAST:event_botonBuscarMedicoActionPerformed

    private void botonPacientesSinAsignacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonPacientesSinAsignacionActionPerformed
        //pacientesSinAsignacion();
    }//GEN-LAST:event_botonPacientesSinAsignacionActionPerformed

    private void botonLimpiarEditarPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonLimpiarEditarPacienteActionPerformed
        limpiarEditar();
    }//GEN-LAST:event_botonLimpiarEditarPacienteActionPerformed

    private void botonBuscarPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonBuscarPacienteActionPerformed
        //Comprueba que se haya digitado un valor en la cedula a buscar
        if (txtCedulaBuscarPaciente.getText().trim().isBlank()) {
            JOptionPane.showMessageDialog(this, "Escriba una cédula a buscar");
        } else {
            //bloquea el campo de la cedula a buscar
            txtCedulaBuscarPaciente.setEditable(false);
            //Se crea el vector enfermedades para luego asignarle la enfermedad al combobox listaEnfermedadesEditar
            String[] enfermedades = new String[]{"cancer", "cardiovasculares", "respiratorias", "cerebrovasculares", "hipertension", "diabetes"};
            //Se crea el objeto cedulaBuscar que adquiere el valor del campo correspondiente
            String cedulaBuscar = this.txtCedulaBuscarPaciente.getText().trim();
            //Se verifica que se haya digitado una cédula
            if (cedulaBuscar.isBlank()) {
                JOptionPane.showMessageDialog(this, "Escriba una cédula para buscar sus datos");
            } else {

            }
        }
    }//GEN-LAST:event_botonBuscarPacienteActionPerformed

    private void botonEliminarPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEliminarPacienteActionPerformed
        try {
            //Se asignan variables a la informacion digitada, eliminandose antes los posibles espacios iniciales y finales (trim)
            String nombre = txtNombreEditarPaciente.getText().trim();
            String cedula = txtCedulaEditarPaciente.getText().trim();
            Integer edad = Integer.parseInt(txtEdadEditarPaciente.getText().trim());
            String ciudad = listaCiudadEditarPaciente.getSelectedItem().toString();
            String eps = listaEpsEditarPaciente.getSelectedItem().toString();

            //Se verifica que ningun campo sea blanco
            if (!nombre.isBlank() && !cedula.isBlank() && !txtEdadEditarPaciente.getText().trim().isBlank() && listaCiudadEditarPaciente.getSelectedIndex() != -1 && listaEpsEditarPaciente.getSelectedIndex() != -1) {
                //proceder con el delete

                if (eliminar(txtCedulaBuscarPaciente.getText().trim())) {
                    JOptionPane.showMessageDialog(this, String.format("Eliminado exitosamente"));
                    //Una vez eliminado el paciente, se desbloquea el campo de la cedula a buscar
                    txtCedulaBuscarPaciente.setEditable(true);
                    txtCedulaBuscarPaciente.setText("");
                    //Se llama al método limpiarEditar para dejar en blanco todos los campos
                    limpiarEditar();
                } else {
                    JOptionPane.showMessageDialog(this, String.format("No ha sido posible eliminar la cédula buscada"));
                }

            } else {
                JOptionPane.showMessageDialog(this, String.format("Asegúrese de escribir y/o seleccionar todos los campos"));
            }
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Debe digitar una edad valida.");
            System.out.println(ex.getMessage());
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar enfermedad");
            System.out.println(ex.getMessage());
        }
    }//GEN-LAST:event_botonEliminarPacienteActionPerformed

    /**
     * Busca y agrega todos los pacientes creados a la listaDatos del menu
     * Procesar Datos
     */
    /*private void obtener(){
        limpiarLista();
        DefaultListModel modeloLista = (DefaultListModel)listaDatos.getModel();
        for (int i = 0; i < Paciente.getContadorPacientes(); i++) {
            String linea = pacientes[i].mostrar();
            modeloLista.addElement(linea);
        }
    }*/

    private void botonEditarPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEditarPacienteActionPerformed
        try {
            String nombre = txtNombreEditarPaciente.getText().trim();
            String cedula = txtCedulaEditarPaciente.getText().trim();
            Integer edad = Integer.parseInt(txtEdadEditarPaciente.getText().trim());
            String ciudad = listaCiudadEditarPaciente.getSelectedItem().toString();
            String eps = listaEpsEditarPaciente.getSelectedItem().toString();

            if (!nombre.isBlank() && !cedula.isBlank() && !txtEdadEditarPaciente.getText().trim().isBlank() && listaCiudadEditarPaciente.getSelectedIndex() != -1 && listaEpsEditarPaciente.getSelectedIndex() != -1) {
                //proceder con el update

                JOptionPane.showMessageDialog(this, "Actualizacion exitosa");
                txtNombreEditarPaciente.setText("");
                txtCedulaEditarPaciente.setText("");
                txtEdadEditarPaciente.setText("");
                listaCiudadEditarPaciente.setSelectedIndex(-1);
                listaEpsEditarPaciente.setSelectedIndex(-1);

                txtCedulaBuscarPaciente.setEditable(true);
                txtCedulaBuscarPaciente.setText("");

            } else {
                JOptionPane.showMessageDialog(this, String.format("Asegúrese de escribir y/o seleccionar todos los campos"));
            }
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Debe digitar una edad valida.");
            System.out.println(ex.getMessage());
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar enfermedad");
            System.out.println(ex.getMessage());
        }
    }//GEN-LAST:event_botonEditarPacienteActionPerformed

    /**
     * 1-Llama al metodo procesar 2-Verifica que hayan pacientes ingresados 3-Se
     * crean las variables necesarias para el proceso 4-Se crea el vector fijo
     * enfermedades y los vectores que registrarán la cantidad de cada
     * enfermedad y de cada eps 5-Se alimenta el vector cantidadEnfermedades y
     * se encuentra la enfermedad que más y que menos se presenta 6-Se alimenta
     * el vector cantidadEps y se encuentra la Eps con más pacientes 7-Se
     * imprimen los datos encontrados 8-Se analiza y se imprimen todos los
     * pacientes en la categoría adulto
     */
    /*private void procesar(){
        
        
        //1 
        obtener();
       
        //2
        if(listaDatos.getModel().getSize()==0){
            JOptionPane.showMessageDialog(null,"Error, la base de datos no tiene pacientes");
        } else{
            DefaultListModel modeloSalidas = new DefaultListModel();
            
            //3
            int contador=0;
            int mayorCantidadEnfermedad = Integer.MIN_VALUE;
            int mayorPosicionEnfermedad = -1;
            int menorCantidadEnfermedad = Integer.MAX_VALUE;
            int menorPosicionEnfermedad = -1;
            int mayorCantidadEps = Integer.MIN_VALUE;
            int mayorPosicionEps = -1;
            
            //4
            String[] enfermedades = new String[]{"cancer","cardiovasculares","respiratorias","cerebrovasculares","hipertension","diabetes"};
            int[] cantidadEnfermedades = new int[enfermedades.length];
            int[] cantidadEps = new int[Paciente.getContadorPacientes()];
            
            listaSalidas.setModel(modeloSalidas);        
            
            //5
            //Se alimenta el vector con las cantidades de enfermedades
            for (int i = 0; i < enfermedades.length; i++) {
                for (int j = 0; j < Paciente.getContadorPacientes(); j++) {
                    if(pacientes[j].getEnfermedad().equalsIgnoreCase(enfermedades[i])){
                        contador++;
                    }
                }
                cantidadEnfermedades[i]=contador;
                contador = 0;
            }

            //Se analiza el vector cantidadEnfermedades para ver la enfermedad que mas se presenta
            for (int i = 0; i < enfermedades.length; i++) {
                if(cantidadEnfermedades[i]>mayorCantidadEnfermedad){
                    mayorCantidadEnfermedad=cantidadEnfermedades[i];
                    mayorPosicionEnfermedad=i;
                }    
            }

            //Se analiza el vector cantidadEnfermedades para ver la enfermedad que menos se presenta
            for (int i = 0; i < enfermedades.length; i++) {
                if(cantidadEnfermedades[i]<menorCantidadEnfermedad){
                    menorCantidadEnfermedad=cantidadEnfermedades[i];
                    menorPosicionEnfermedad=i;
                }    
            }
            
            //6
            //Se alimenta el vector cantidad eps
            contador=0;
            for (int i = 0; i < Paciente.getContadorPacientes(); i++) {
                for (int j = 0; j < Paciente.getContadorPacientes(); j++) {
                    if(pacientes[j].getEps().equalsIgnoreCase(pacientes[i].getEps())){
                        contador++;
                    }
                }
                cantidadEps[i]=contador;
                contador=0;
            }

            //Se analiza el vector cantidadEPS para ver la EPS que mas pacientes tiene
            for (int i = 0; i < cantidadEps.length; i++) {
                if(cantidadEps[i]>mayorCantidadEps){
                    mayorCantidadEps=cantidadEps[i];
                    mayorPosicionEps=i;
                }
            }
            
            //7
            //Se imprime la enfermedad con mayor y menor presencia.
            //Se imprime la Eps con más pacientes
            modeloSalidas.addElement(enfermedades[mayorPosicionEnfermedad]);
            modeloSalidas.addElement(enfermedades[menorPosicionEnfermedad]);
            modeloSalidas.addElement(pacientes[mayorPosicionEps].getEps());
            
            //8
            //Se imprimen todos los pacientes en la categoría adulto según el método clasificarEdad de la clase Paciente
            for (int i = 0; i < Paciente.getContadorPacientes(); i++) {
                if(pacientes[i].clasificarEdad(pacientes[i].getEdad())){
                    modeloSalidas.addElement(pacientes[i].getNombre()+" "+pacientes[i].getCedula());
                }
            }

            //actualizar los valores de la lista
            listaSalidas.setModel(modeloSalidas);
        }
    }*/
 /*private void agregarPacienteALista(String valor){
        DefaultListModel pacientes = (DefaultListModel)listaDatos.getModel();
        pacientes.addElement(valor);
        listaDatos.setModel(pacientes);
    }*/
 /*private boolean comprobarCedula(String cedula, String cedulaBD){
        return (cedula.equalsIgnoreCase(cedulaBD));
    }*/

    private void botonObtenerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonObtenerActionPerformed
        //obtener();
    }//GEN-LAST:event_botonObtenerActionPerformed

    private void botonProcesarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonProcesarActionPerformed

        //procesar();
    }//GEN-LAST:event_botonProcesarActionPerformed

    private void botonIngresarPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonIngresarPacienteActionPerformed
        try {
            String nombre = txtNombrePaciente.getText().trim();
            String cedula = txtCedulaPaciente.getText().trim();
            Integer edad = Integer.parseInt(txtEdadPaciente.getText().trim());
            String ciudad = listaCiudadPaciente.getSelectedItem().toString();
            String eps = listaEpsPaciente.getSelectedItem().toString();

            if (!nombre.isBlank() && !cedula.isBlank() && !txtEdadPaciente.getText().trim().isBlank() && edad > 0 && listaCiudadPaciente.getSelectedIndex() != -1 && listaEpsPaciente.getSelectedIndex() != -1) {
                agregarPaciente(nombre, cedula, edad, ciudad, eps);
            } else {
                JOptionPane.showMessageDialog(this, String.format("Asegúrese de escribir y/o seleccionar todos los campos"));
            }

        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Debe digitar una edad válida.");
            //System.out.println(ex.getMessage());
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar ciudad y eps");
            //System.out.println(ex.getMessage());
        }
    }//GEN-LAST:event_botonIngresarPacienteActionPerformed

    private void btnEditarEpsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarEpsActionPerformed
        Connection conexionBD = conector.crearConexion();
        if (conexionBD == null) {
            JOptionPane.showConfirmDialog(this, "No se pudo crear la conexion");
        } else {
            try {
                String eps = txtEpsModificar.getText().trim();
                String epsAModificar = listaEpsModificar.getSelectedItem().toString();
                if (!eps.isBlank()) {
                    String textoQuery = "update EPS Set EPS = '%1$s' Where EPS = '%2$s';";
                    String query = String.format(textoQuery, eps, epsAModificar);
                    System.out.println(query);
                    Integer filasAfectadas = conector.ejecutarActualizacion(conexionBD, query);
                    if (filasAfectadas > 0) {
                        JOptionPane.showMessageDialog(this, String.format("Eps modificada exitosamente."));
                        txtEpsModificar.setText("");
                        actualizarListaEpsModificar();
                        listaEpsModificar.setSelectedIndex(-1);
                    } else {
                        JOptionPane.showMessageDialog(this, String.format("La eps ya existe."));
                    }
                } else {
                    JOptionPane.showMessageDialog(this, String.format("Debe escribir una eps"));
                }
            } catch (NullPointerException ex) {
                JOptionPane.showMessageDialog(this, "Debe seleccionar Eps");
                //System.out.println(ex.getMessage());
            }
        }
    }//GEN-LAST:event_btnEditarEpsActionPerformed

    private void btnIngresarCiudadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIngresarCiudadActionPerformed
        Connection conexionBD = conector.crearConexion();
        if (conexionBD == null) {
            JOptionPane.showConfirmDialog(this, "No se pudo crear la conexion");
        } else {
            String ciudad = txtCiudadIngresar.getText().trim();
            if (!ciudad.isBlank()) {
                String textoQuery = "insert into Ciudades (Ciudad) VALUES ('%1$s');";
                String query = String.format(textoQuery, ciudad);
                System.out.println(query);
                Integer filasAfectadas = conector.ejecutarActualizacion(conexionBD, query);
                if (filasAfectadas > 0) {
                    JOptionPane.showMessageDialog(this, String.format("Ciudad creada exitosamente."));
                    txtCiudadIngresar.setText("");
                } else {
                    JOptionPane.showMessageDialog(this, String.format("La ciudad ya existe."));
                }
            } else {
                JOptionPane.showMessageDialog(this, String.format("Debe escribir una ciudad"));
            }
        }
    }//GEN-LAST:event_btnIngresarCiudadActionPerformed

    private void btnEliminarEpsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarEpsActionPerformed
        Connection conexionBD = conector.crearConexion();
        if (conexionBD == null) {
            JOptionPane.showConfirmDialog(this, "No se pudo crear la conexion");
        } else {
            try {
                String epsAModificar = listaEpsModificar.getSelectedItem().toString();
                String textoQuery = "Delete from EPS where EPS = '%1$s';";
                String query = String.format(textoQuery, epsAModificar);
                System.out.println(query);
                Integer filasAfectadas = conector.ejecutarActualizacion(conexionBD, query);
                if (filasAfectadas > 0) {
                    JOptionPane.showMessageDialog(this, String.format("Eps eliminada exitosamente."));
                    txtEpsModificar.setText("");
                    actualizarListaEpsModificar();
                    listaEpsModificar.setSelectedIndex(-1);
                } else {
                    JOptionPane.showMessageDialog(this, String.format("Hubo un error en la eliminación."));
                }
            } catch (NullPointerException ex) {
                JOptionPane.showMessageDialog(this, "Debe seleccionar eps");
                //System.out.println(ex.getMessage());
            }
        }
    }//GEN-LAST:event_btnEliminarEpsActionPerformed

    private void btnIngresarEpsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIngresarEpsActionPerformed
        Connection conexionBD = conector.crearConexion();
        if (conexionBD == null) {
            JOptionPane.showConfirmDialog(this, "No se pudo crear la conexion");
        } else {
            String Eps = txtEpsIngresar.getText().trim();
            if (!Eps.isBlank()) {
                String textoQuery = "insert into EPS (EPS) VALUES ('%1$s');";
                String query = String.format(textoQuery, Eps);
                System.out.println(query);
                Integer filasAfectadas = conector.ejecutarActualizacion(conexionBD, query);
                if (filasAfectadas > 0) {
                    JOptionPane.showMessageDialog(this, String.format("Eps creada exitosamente."));
                    txtEpsIngresar.setText("");
                } else {
                    JOptionPane.showMessageDialog(this, String.format("La Eps ya existe."));
                }
            } else {
                JOptionPane.showMessageDialog(this, String.format("Debe escribir una Eps"));
            }
        }
    }//GEN-LAST:event_btnIngresarEpsActionPerformed

    private void btnIngresarEspecialidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIngresarEspecialidadActionPerformed
        Connection conexionBD = conector.crearConexion();
        if (conexionBD == null) {
            JOptionPane.showConfirmDialog(this, "No se pudo crear la conexion");
        } else {
            String especialidad = txtEspecialidadIngresar.getText().trim();
            if (!especialidad.isBlank()) {
                String textoQuery = "insert into Especialidades (Especialidad) VALUES ('%1$s');";
                String query = String.format(textoQuery, especialidad);
                System.out.println(query);
                Integer filasAfectadas = conector.ejecutarActualizacion(conexionBD, query);
                if (filasAfectadas > 0) {
                    JOptionPane.showMessageDialog(this, String.format("Especialidad creada exitosamente."));
                    txtEspecialidadIngresar.setText("");
                    actualizarListaEspecialidadModificar();
                    listaEspecialidadModificar.setSelectedIndex(-1);
                } else {
                    JOptionPane.showMessageDialog(this, String.format("La Especialidad ya existe."));
                }
            } else {
                JOptionPane.showMessageDialog(this, String.format("Debe escribir una Especialidad"));
            }
        }
        /*String ciudad = txtCiudadIngresar.getText().trim();
            if (!ciudad.isBlank()) {
                String textoQuery = "insert into Ciudades (Ciudad) VALUES ('%1$s');";
                String query = String.format(textoQuery, ciudad);
                System.out.println(query);
                Integer filasAfectadas = conector.ejecutarActualizacion(conexionBD, query);
                if (filasAfectadas > 0) {
                    JOptionPane.showMessageDialog(this, String.format("Ciudad creada exitosamente."));
                    txtCiudadIngresar.setText("");
                } else {
                    JOptionPane.showMessageDialog(this, String.format("La ciudad ya existe."));
                }
            } else {
                JOptionPane.showMessageDialog(this, String.format("Debe escribir una ciudad"));
            }
        }*/
    }//GEN-LAST:event_btnIngresarEspecialidadActionPerformed

    private void btnEditarCiudadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarCiudadActionPerformed
        Connection conexionBD = conector.crearConexion();
        if (conexionBD == null) {
            JOptionPane.showConfirmDialog(this, "No se pudo crear la conexion");
        } else {
            try {
                String ciudad = txtCiudadModificar.getText().trim();
                String ciudadAModificar = listaCiudadModificar.getSelectedItem().toString();
                if (!ciudad.isBlank()) {
                    String textoQuery = "update Ciudades Set Ciudad = '%1$s' Where Ciudad = '%2$s';";
                    String query = String.format(textoQuery, ciudad, ciudadAModificar);
                    System.out.println(query);
                    Integer filasAfectadas = conector.ejecutarActualizacion(conexionBD, query);
                    if (filasAfectadas > 0) {
                        JOptionPane.showMessageDialog(this, String.format("Ciudad modificada exitosamente."));
                        txtCiudadModificar.setText("");
                        actualizarListaCiudadModificar();
                        listaCiudadModificar.setSelectedIndex(-1);
                    } else {
                        JOptionPane.showMessageDialog(this, String.format("La ciudad ya existe."));
                    }
                } else {
                    JOptionPane.showMessageDialog(this, String.format("Debe escribir una ciudad"));
                }
            } catch (NullPointerException ex) {
                JOptionPane.showMessageDialog(this, "Debe seleccionar ciudad");
                //System.out.println(ex.getMessage());
            }
        }
    }//GEN-LAST:event_btnEditarCiudadActionPerformed

    private void btnEditarEspecialidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarEspecialidadActionPerformed
        Connection conexionBD = conector.crearConexion();
        if (conexionBD == null) {
            JOptionPane.showConfirmDialog(this, "No se pudo crear la conexion");
        } else {
            try {
                String especialidad = txtEspecialidadModificar.getText().trim();
                String especialidadAModificar = listaEspecialidadModificar.getSelectedItem().toString();
                if (!especialidad.isBlank()) {
                    String textoQuery = "update Especialidades Set Especialidad = '%1$s' Where Especialidad = '%2$s';";
                    String query = String.format(textoQuery, especialidad, especialidadAModificar);
                    System.out.println(query);
                    Integer filasAfectadas = conector.ejecutarActualizacion(conexionBD, query);
                    if (filasAfectadas > 0) {
                        JOptionPane.showMessageDialog(this, String.format("Especialidad modificada exitosamente."));
                        txtEspecialidadModificar.setText("");
                        actualizarListaEspecialidadModificar();
                        listaEspecialidadModificar.setSelectedIndex(-1);
                    } else {
                        JOptionPane.showMessageDialog(this, String.format("La especialidad ya existe."));
                    }
                } else {
                    JOptionPane.showMessageDialog(this, String.format("Debe escribir una especialidad"));
                }
            } catch (NullPointerException ex) {
                JOptionPane.showMessageDialog(this, "Debe seleccionar especialidad");
                //System.out.println(ex.getMessage());
            }
        }
    }//GEN-LAST:event_btnEditarEspecialidadActionPerformed

    private void btnEliminarCiudadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarCiudadActionPerformed
        Connection conexionBD = conector.crearConexion();
        if (conexionBD == null) {
            JOptionPane.showConfirmDialog(this, "No se pudo crear la conexion");
        } else {
            try {
                String ciudadAModificar = listaCiudadModificar.getSelectedItem().toString();
                String textoQuery = "Delete from Ciudades where Ciudad = '%1$s';";
                String query = String.format(textoQuery, ciudadAModificar);
                System.out.println(query);
                Integer filasAfectadas = conector.ejecutarActualizacion(conexionBD, query);
                if (filasAfectadas > 0) {
                    JOptionPane.showMessageDialog(this, String.format("Ciudad eliminada exitosamente."));
                    txtCiudadModificar.setText("");
                    actualizarListaCiudadModificar();
                    listaCiudadModificar.setSelectedIndex(-1);
                } else {
                    JOptionPane.showMessageDialog(this, String.format("Hubo un error en la eliminación."));
                }
            } catch (NullPointerException ex) {
                JOptionPane.showMessageDialog(this, "Debe seleccionar ciudad");
                //System.out.println(ex.getMessage());
            }
        }
    }//GEN-LAST:event_btnEliminarCiudadActionPerformed

    private void btnEliminarEspecialidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarEspecialidadActionPerformed
        Connection conexionBD = conector.crearConexion();
        if (conexionBD == null) {
            JOptionPane.showConfirmDialog(this, "No se pudo crear la conexion");
        } else {
            try {
                String especialidadAModificar = listaEspecialidadModificar.getSelectedItem().toString();
                String textoQuery = "Delete from Especialidades where Especialidad = '%1$s';";
                String query = String.format(textoQuery, especialidadAModificar);
                System.out.println(query);
                Integer filasAfectadas = conector.ejecutarActualizacion(conexionBD, query);
                if (filasAfectadas > 0) {
                    JOptionPane.showMessageDialog(this, String.format("Especialidad eliminada exitosamente."));
                    txtEspecialidadModificar.setText("");
                    actualizarListaEspecialidadModificar();
                    listaEspecialidadModificar.setSelectedIndex(-1);
                } else {
                    JOptionPane.showMessageDialog(this, String.format("Hubo un error en la eliminación."));
                }
            } catch (NullPointerException ex) {
                JOptionPane.showMessageDialog(this, "Debe seleccionar especialidad");
                //System.out.println(ex.getMessage());
            }
        }
    }//GEN-LAST:event_btnEliminarEspecialidadActionPerformed

    private void btnBuscarEnfermedadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarEnfermedadActionPerformed
        Connection conexionBD = conector.crearConexion();
        if (conexionBD == null) {
            JOptionPane.showConfirmDialog(this, "No se pudo crear la conexion");
        } else {
            try {
                String enfermedad = listaEnfermedadModificar.getSelectedItem().toString();
                String textoQuerySelect = "Select * from Enfermedades where Enfermedad = '%1$s';";
                String querySelect = String.format(textoQuerySelect, enfermedad);
                ResultSet resultados = conector.ejecutarQuery(conexionBD, querySelect);
                String enfermedadNueva = resultados.getString("Enfermedad");
                String idEspecialidadNueva = resultados.getString("Id_Especialidad");
                txtEnfermedadModificar.setText(enfermedadNueva);
                //System.out.println(idEspecialidadNueva);
                String textoQuerySelect2 = "Select * from Especialidades where Id = '%1$s';";
                //System.out.println(textoQuerySelect2);
                String querySelect2 = String.format(textoQuerySelect2, idEspecialidadNueva);
                ResultSet resultados2 = conector.ejecutarQuery(conexionBD, querySelect2);
                String especialidad = resultados2.getString("Especialidad");
                for (int i = 0; i < listaEnfermedadEspecialidadModificar.getItemCount(); i++) {
                    if (especialidad.equalsIgnoreCase(listaEnfermedadEspecialidadModificar.getItemAt(i))) {
                        listaEnfermedadEspecialidadModificar.setSelectedIndex(i);
                    }
                }
                listaEnfermedadModificar.setEnabled(false);

                /*
                Integer idEspecialidad = resultados.getInt("Id");
                String textoQuery = "insert into Enfermedades (Enfermedad, Id_Especialidad) VALUES ('%1$s', %2$d);";
                String query = String.format(textoQuery, enfermedad, idEspecialidad);
                System.out.println(query);
                Integer filasAfectadas = conector.ejecutarActualizacion(conexionBD, query);
                if (filasAfectadas > 0) {
                    JOptionPane.showMessageDialog(this, String.format("Enfermedad creada exitosamente."));
                    txtEnfermedadIngresar.setText("");
                    actualizarListaEnfermedadModificar();
                    listaEnfermedadEspecialidadIngresar.setSelectedIndex(-1);
                } else {
                    JOptionPane.showMessageDialog(this, String.format("La enfermedad ya existe."));
                }
                 */
                //} else {
                //    JOptionPane.showMessageDialog(this, String.format("Debe escribir una enfermedad"));
                //}
            } catch (NullPointerException e) {
                JOptionPane.showMessageDialog(this, String.format("Debe seleccionar un dato de la lista"));
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, String.format("Error de Conexión"));
            }
        }
    }//GEN-LAST:event_btnBuscarEnfermedadActionPerformed

    private void btnIngresarEnfermedadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIngresarEnfermedadActionPerformed
        Connection conexionBD = conector.crearConexion();
        if (conexionBD == null) {
            JOptionPane.showConfirmDialog(this, "No se pudo crear la conexion");
        } else {
            try {
                String enfermedad = txtEnfermedadIngresar.getText().trim();
                String especialidad = listaEnfermedadEspecialidadIngresar.getSelectedItem().toString();
                String textoQuerySelect = "Select * from Especialidades where Especialidad = '%1$s';";
                String querySelect = String.format(textoQuerySelect, especialidad);
                ResultSet resultados = conector.ejecutarQuery(conexionBD, querySelect);
                Integer idEspecialidad = resultados.getInt("Id");
                String textoQuery = "insert into Enfermedades (Enfermedad, Id_Especialidad) VALUES ('%1$s', %2$d);";
                String query = String.format(textoQuery, enfermedad, idEspecialidad);
                //System.out.println(query);
                Integer filasAfectadas = conector.ejecutarActualizacion(conexionBD, query);
                if (filasAfectadas > 0) {
                    JOptionPane.showMessageDialog(this, String.format("Enfermedad creada exitosamente."));
                    txtEnfermedadIngresar.setText("");
                    actualizarListaEnfermedadModificar();
                    listaEnfermedadEspecialidadIngresar.setSelectedIndex(-1);
                } else {
                    JOptionPane.showMessageDialog(this, String.format("La enfermedad ya existe."));
                }

                //} else {
                //    JOptionPane.showMessageDialog(this, String.format("Debe escribir una enfermedad"));
                //}
            } catch (NullPointerException e) {
                JOptionPane.showMessageDialog(this, String.format("Debe en la lista"));
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, String.format("Error de Conexión"));
            }
        }
    }//GEN-LAST:event_btnIngresarEnfermedadActionPerformed

    private void btnBuscarEnfermedad1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarEnfermedad1ActionPerformed
        txtEnfermedadModificar.setText("");
        listaEnfermedadModificar.setEnabled(true);
        listaEnfermedadModificar.setSelectedIndex(-1);
        listaEnfermedadEspecialidadModificar.setSelectedIndex(-1);
    }//GEN-LAST:event_btnBuscarEnfermedad1ActionPerformed

    private void btnEditarEnfermedadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarEnfermedadActionPerformed
        Connection conexionBD = conector.crearConexion();
        if (conexionBD == null) {
            JOptionPane.showConfirmDialog(this, "No se pudo crear la conexion");
        } else {
            try {
                //System.out.println(listaEnfermedadModificar.getSelectedIndex());
                //System.out.println(listaEnfermedadEspecialidadModificar.getSelectedIndex());
                String enfermedadAnterior = listaEnfermedadModificar.getSelectedItem().toString();
                System.out.println(enfermedadAnterior);
                String enfermedadNueva = txtEnfermedadModificar.getText().trim();
                System.out.println(enfermedadNueva);
                String especialidad = listaEnfermedadEspecialidadModificar.getSelectedItem().toString();
                if (!enfermedadNueva.isBlank()) {
                    //System.out.println(listaEnfermedadModificar.getSelectedIndex());
                    //System.out.println(listaEnfermedadEspecialidadModificar.getSelectedIndex());
                    String textoQuerySelect = "Select * from Especialidades where Especialidad = '%1$s';";
                    String querySelect = String.format(textoQuerySelect, especialidad);
                    //System.out.println(querySelect);
                    ResultSet resultados = conector.ejecutarQuery(conexionBD, querySelect);
                    //System.out.println(resultados);
                    Integer idEspecialidad = resultados.getInt("Id");
                    String textoQuery = "update Enfermedades Set Enfermedad = '%1$s', Id_Especialidad = '%2$d' where Enfermedad = '%3$s';";
                    String query = String.format(textoQuery, enfermedadNueva, idEspecialidad, enfermedadAnterior);
                    System.out.println(query);
                    Integer filasAfectadas = conector.ejecutarActualizacion(conexionBD, query);
                    if (filasAfectadas > 0) {
                        JOptionPane.showMessageDialog(this, String.format("Enfermedad creada exitosamente."));
                        txtEnfermedadModificar.setText("");
                        actualizarListaEnfermedadModificar();
                        listaEnfermedadEspecialidadModificar.setSelectedIndex(-1);
                        listaEnfermedadModificar.setEnabled(true);
                        listaEnfermedadModificar.setSelectedIndex(-1);
                    } else {
                        JOptionPane.showMessageDialog(this, String.format("La enfermedad ya existe."));
                    }

                } else {
                    JOptionPane.showMessageDialog(this, String.format("Debe escribir una enfermedad"));
                }
            } catch (NullPointerException e) {
                JOptionPane.showMessageDialog(this, String.format("Debe seleccionar datos de las listas"));
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, String.format("Error de Conexión"));
            }
        }
    }//GEN-LAST:event_btnEditarEnfermedadActionPerformed

    /**
     * Crea la instancia paciente, agrega el paciente al vector, limpia campos y
     * aumenta el atributo contador de pacientes
     *
     * @param nombre
     * @param cedula
     * @param edad
     * @param ciudad
     * @param eps
     */
    private void agregarPaciente(String nombre, String cedula, Integer edad, String ciudad, String eps) {

        Connection conexionBD = conector.crearConexion();
        if (conexionBD == null) {
            JOptionPane.showConfirmDialog(this, "No se pudo crear la conexion");
        } else {
            String textoQuery = "insert into Pacientes (Nombre,Cedula,Edad,Ciudad,Eps) VALUES ('%1$s','%2$s',%3$d,'%4$s','%5$s')";
            String query = String.format(textoQuery, nombre, cedula, edad, ciudad, eps);
            //System.out.println(query);
            int filasAfectadas = conector.ejecutarActualizacion(conexionBD, query);
            if (filasAfectadas > 0) {
                JOptionPane.showMessageDialog(this, String.format("Paciente creado exitosamente."));
                txtNombrePaciente.setText("");
                txtCedulaPaciente.setText("");
                txtEdadPaciente.setText("");
                listaCiudadPaciente.setSelectedIndex(-1);
                listaEpsPaciente.setSelectedIndex(-1);
            } else {
                JOptionPane.showMessageDialog(this, String.format("La cedula ya existe."));
            }
        }
    }

    /**
     * Realiza el proceso de eliminar un paciente
     *
     * @param cedulaEliminar obtiene la cedula a eliminar
     * @return true o false si el paciente fue eliminado correctamente o no
     */
    public boolean eliminar(String cedulaEliminar) {
        /*
        for (int i = 0; i < Paciente.getContadorPacientes(); i++) {
            if(pacientes[i].getCedula().equalsIgnoreCase(cedulaEliminar)){
                //Se llama al método correrIzquierda
                correrIzquierda(i);
                return true;
            }
        }
         */
        return false;
    }

    /**
     * Limpia todos los campos de editar paciente y desbloquea el campo de la
     * cedula a buscar
     */
    public void limpiarEditar() {
        txtNombreEditarPaciente.setText("");
        txtCedulaEditarPaciente.setText("");
        txtEdadEditarPaciente.setText("");
        listaCiudadEditarPaciente.setSelectedIndex(-1);
        listaEpsEditarPaciente.setSelectedIndex(-1);

        txtCedulaBuscarPaciente.setEditable(true);
        txtCedulaBuscarPaciente.setText("");
    }

    /**
     * Crea el objeto medico y lo agrega a la lista de Medicos
     *
     * @param nombre
     * @param cedula
     * @param eps
     * @param especialidad
     */
    private void agregarMedico(String nombre, String cedula, String ciudad, String eps, String especialidad) {

        Medico medico = new Medico(nombre, cedula, ciudad, eps, especialidad);

        txtNombreMedico.setText("");
        txtCedulaMedico.setText("");
        listaCiudadMedico.setSelectedIndex(-1);
        listaEpsMedico.setSelectedIndex(-1);
        listaEspecialidad.setSelectedIndex(-1);

        //Se agregan todos los medicos existentes en el vector medicos a la listaMedicos
        /*DefaultListModel modeloMedicos = (DefaultListModel)listaMedicos.getModel();
        for (int i = 0; i < Medico.getContadorMedicos(); i++) {
                String linea = medicos[i].mostrar();
                modeloMedicos.addElement(linea);
        }
         */
    }

    /**
     * Limpia todos los campos del menú Atencion Médica
     */
    /*
    public void limpiarAsignar(){
        txtNombreMedicoAsignar.setText("");
        txtEpsMedicoAsignar.setText("");
        txtlistaEspecialidadAsignar.setText("");
        
        txtCedulaBuscarMedico.setEditable(true);
        txtCedulaBuscarMedico.setText("");
    }
     */
    /**
     * Se limpia la listaDatos del menu Procesar Datos correspondiente a todos
     * los pacientes registrados
     */
    /*
    public void limpiarLista(){
        DefaultListModel modeloVacio = new DefaultListModel();
        listaDatos.setModel(modeloVacio);
    }
     */
    /**
     * Limpia la listaPacientesSinMedico del menu Atencion Medica
     */
    /*
    public void limpiarListaPacientesSinMedico(){
        DefaultListModel modeloPacientesSinMedico = new DefaultListModel();
        listaPacientesSinMedico.setModel(modeloPacientesSinMedico);
    }*/
    /**
     * Limpia la listaPacientesConMedico del menu Atencion Medica
     */
    /*public void limpiarListaPacientesConMedico(){
        DefaultListModel modeloPacientesConMedico = new DefaultListModel();
        listaPacientesConMedico.setModel(modeloPacientesConMedico);
    }*/
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonBuscarMedico;
    private javax.swing.JButton botonBuscarPaciente;
    private javax.swing.JButton botonEditarPaciente;
    private javax.swing.JButton botonEliminarPaciente;
    private javax.swing.JButton botonIngresarMedico;
    private javax.swing.JButton botonIngresarPaciente;
    private javax.swing.JButton botonLimpiarAsignar;
    private javax.swing.JButton botonLimpiarEditarPaciente;
    private javax.swing.JButton botonObtener;
    private javax.swing.JButton botonPacientesSinAsignacion;
    private javax.swing.JButton botonProcesar;
    private javax.swing.JButton btnBuscarEnfermedad;
    private javax.swing.JButton btnBuscarEnfermedad1;
    private javax.swing.JButton btnEditarCiudad;
    private javax.swing.JButton btnEditarEnfermedad;
    private javax.swing.JButton btnEditarEnfermedad1;
    private javax.swing.JButton btnEditarEps;
    private javax.swing.JButton btnEditarEspecialidad;
    private javax.swing.JButton btnEliminarCiudad;
    private javax.swing.JButton btnEliminarEps;
    private javax.swing.JButton btnEliminarEspecialidad;
    private javax.swing.JButton btnIngresarCiudad;
    private javax.swing.JButton btnIngresarEnfermedad;
    private javax.swing.JButton btnIngresarEps;
    private javax.swing.JButton btnIngresarEspecialidad;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblBuscarMedico;
    private javax.swing.JLabel lblBusqueda;
    private javax.swing.JLabel lblCedulaBuscarPaciente;
    private javax.swing.JLabel lblCedulaEditarPaciente;
    private javax.swing.JLabel lblCedulaMedico;
    private javax.swing.JLabel lblCedulaMedicoBuscar;
    private javax.swing.JLabel lblCedulaPaciente;
    private javax.swing.JLabel lblCiudadEditarPaciente;
    private javax.swing.JLabel lblCiudadIngresar;
    private javax.swing.JLabel lblCiudadIngresar1;
    private javax.swing.JLabel lblCiudadMedico;
    private javax.swing.JLabel lblCiudadPaciente;
    private javax.swing.JLabel lblEdadEditarPaciente;
    private javax.swing.JLabel lblEdadPaciente;
    private javax.swing.JLabel lblEpsEditarPaciente;
    private javax.swing.JLabel lblEpsIngresar;
    private javax.swing.JLabel lblEpsIngresar1;
    private javax.swing.JLabel lblEpsMedico;
    private javax.swing.JLabel lblEpsMedicoAsignar;
    private javax.swing.JLabel lblEpsPaciente;
    private javax.swing.JLabel lblEs;
    private javax.swing.JLabel lblEs1;
    private javax.swing.JLabel lblEs2;
    private javax.swing.JLabel lblEs3;
    private javax.swing.JLabel lblEs4;
    private javax.swing.JLabel lblEspecialidad;
    private javax.swing.JLabel lblEspecialidadAsignar;
    private javax.swing.JLabel lblIngresar;
    private javax.swing.JLabel lblIngresar1;
    private javax.swing.JLabel lblIngresar2;
    private javax.swing.JLabel lblIngresar3;
    private javax.swing.JLabel lblIngresarMedico;
    private javax.swing.JLabel lblNombreEditarPaciente;
    private javax.swing.JLabel lblNombreMedico;
    private javax.swing.JLabel lblNombreMedicoAsignar;
    private javax.swing.JLabel lblNombrePaciente;
    private javax.swing.JComboBox<String> listaCiudadEditarPaciente;
    private javax.swing.JComboBox<String> listaCiudadMedico;
    private javax.swing.JComboBox<String> listaCiudadModificar;
    private javax.swing.JComboBox<String> listaCiudadPaciente;
    private javax.swing.JList<String> listaDatos;
    private javax.swing.JComboBox<String> listaEnfermedadEspecialidadIngresar;
    private javax.swing.JComboBox<String> listaEnfermedadEspecialidadModificar;
    private javax.swing.JComboBox<String> listaEnfermedadModificar;
    private javax.swing.JComboBox<String> listaEpsEditarPaciente;
    private javax.swing.JComboBox<String> listaEpsMedico;
    private javax.swing.JComboBox<String> listaEpsModificar;
    private javax.swing.JComboBox<String> listaEpsPaciente;
    private javax.swing.JComboBox<String> listaEspecialidad;
    private javax.swing.JComboBox<String> listaEspecialidadModificar;
    private javax.swing.JList<String> listaPacientesConMedico;
    private javax.swing.JList<String> listaPacientesSinMedico;
    private javax.swing.JList<String> listaSalidas;
    private javax.swing.JTextField txtCedulaBuscarMedico;
    private javax.swing.JTextField txtCedulaBuscarPaciente;
    private javax.swing.JTextField txtCedulaEditarPaciente;
    private javax.swing.JTextField txtCedulaMedico;
    private javax.swing.JTextField txtCedulaPaciente;
    private javax.swing.JTextField txtCiudadIngresar;
    private javax.swing.JTextField txtCiudadModificar;
    private javax.swing.JTextField txtEdadEditarPaciente;
    private javax.swing.JTextField txtEdadPaciente;
    private javax.swing.JTextField txtEnfermedadIngresar;
    private javax.swing.JTextField txtEnfermedadModificar;
    private javax.swing.JTextField txtEpsIngresar;
    private javax.swing.JTextField txtEpsMedicoAsignar;
    private javax.swing.JTextField txtEpsModificar;
    private javax.swing.JTextField txtEspecialidadIngresar;
    private javax.swing.JTextField txtEspecialidadModificar;
    private javax.swing.JTextField txtNombreEditarPaciente;
    private javax.swing.JTextField txtNombreMedico;
    private javax.swing.JTextField txtNombreMedicoAsignar;
    private javax.swing.JTextField txtNombrePaciente;
    private javax.swing.JTextField txtlistaEspecialidadAsignar;
    // End of variables declaration//GEN-END:variables
}
